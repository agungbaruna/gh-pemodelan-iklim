[
  {
    "objectID": "praktikum-1.html",
    "href": "praktikum-1.html",
    "title": "Dynamical Downscaling: Model Weather Research Forecasting (WRF)",
    "section": "",
    "text": "Global Climate Model (GCM) adalah alat yang digunakan dalam mensimulasikan keadaan iklim pada masa lalu, masa sekarang, maupun masa depan. GCM memiliki kemampuan dalam melakukan simulasi variabilitas iklim, sifat-sifat fisis, serta kimia di bumi dengan perhitungan secara matematis yang menggambarkan proses interaksi dan timbal balik pada komponen atmosfer, lautan, dan biotik. Kelemahan dalam GCM adalah ketidakmampuan menangkap kejadian-kejadian iklim pada skala regional maupun lokal karena memiliki resolusi spasial yang kecil, yaitu sekitar &gt;100 km. Ketidakmampuan GCM dalam menjelaskan keadaan iklim secara regional maupun lokal disebabkan oleh keterbatasan sumber daya komputasi. Seiring dengan berkembangnya teknologi komputasi, beberapa instansi seperti Met Office Hadley Center, National Center for Atmospheric Research (NCAR), dan European Centre for Medium-Range Weather Forecasts (ECMWF) telah mengembangkan GCM yang mampu menjelaskan fenomena-fenomena cuaca pada skala regional dengan sumber daya komputer yang sangat tinggi. Teknologi komputasi saat ini sangat memudahkan bagi para pengembang GCM, terutama dalam kecepatan eksekusi algoritme prakiraan cuaca numerik. Contohnya, model prakiraan cuaca dari ECMWF, yaitu Integrated Forecasts System (IFS) memiliki resolusi spasial sekitar 9 km. Apakah dengan berkembangnya GCM yang sudah bisa menjelaskan fenomena regional telah menggantikan Regional Climate Model (RCM)? Tentu saja tidak. Model iklim regional tentu masih dapat digunakan untuk mensimulasikan fenomena cuaca pada skala lokal maupun mikro, sebagai contoh turbulensi dan proses konveksi awan kumulus yang tidak dapat dijelaskan oleh GCM (Gambar 1).\n\n\n\n\n\n\nGambar 1: Resolusi model iklim dalam mensimulasikan berbagai fenomena cuaca\n\n\n\nMetode downscaling merupakan suatu cara dalam mendapatkan informasi spesifik pada suatu wilayah tertentu dengan resolusi tinggi, baik spasial maupun temporal. Metode downscaling di dalam ilmu iklim umum digunakan pada aplikasi dalam bidang hidrologi (Piani, Weedon, et al. 2010), pertanian (Glotter et al. 2014), dan iklim perkotaan (Smid and Costa 2018). Misalnya dalam bidang hidrologi, teknik downscaling digunakan untuk pemodelan debit sungai dan banjir (Piani, Haerter, et al. 2010). Wilby dan Wigley (Wilby and Wigley 1997) mengelompokkan teknik downscaling menjadi 4 kategori, yaitu\n\nRegresi\nMetode regresi merupakan metode downscaling paling awal yang telah digunakan pada kajian perubahan iklim. Hal ini dapat dibuktikan dari penelitian oleh Kim pada tahun 1984 (Kim et al. 1984). Pendekatan ini secara umum membangun hubungan linier atau non-linier antara parameter titik lokasi dengan prediktor variabel dari resolusi kasar. Contoh dari metode ini adalah regresi linier sederhana, regresi linier berganda, Artificial Neural Network (ANN), regresi komponen utama (Principle Component Regression/PCR), dan lain sebagainya. Sudah banyak penelitian yang menerapkan metode ini untuk kajian perubahan iklim (Huth and Kyselỳ 2000; Goly et al. 2014; Sachindra et al. 2014; Pahlavan et al. 2018).\nPola cuaca\nMetode ini dibangun dari hubungan statistik dari variabel cuaca di stasiun observasi atau rata-rata area dengan klasifikasi cuaca tertentu yang dapat diturunkan secara obyektif maupun subyektif. Metode ini secara obyektif dapat meliputi komponen utama, Canonical Correlation Analyses (CCA), aturan Fuzzy, dan Neural Networks. Contoh prosedur pengelompokkan pola cuaca, yaitu European Grosswetterlagen dan British Isles Lamb Weather Types.\nStokastik\nModel WGEN (Richardson 1981) merupakan contoh dari pendekatan ini. Model ini memiliki kemampuan dalam membangkitkan data curah hujan harian berdasarkan peluang kejadian hujan (hujan dan tidak hujan) dengan rantai Markov order satu. Model ini telah digunakan dalam kajian perubahan iklim dan analisis dampak. Model stokastik yang telah diperoleh dari data observasi deret waktu dapat divalidasi dengan GCM dan perlu dikalibrasi terlebih dahulu.\nLimited-area climate models (LAM)\nMetode terakhir untuk melakukan downscaling terhadap GCM adalah dengan menyematkan model iklim dengan area terbatas. Sebenarnya, LAM pada saat ini dapat diistilahkan sebagai Regional Climate Model (RCM). RCM memiliki resolusi spasial kurang dari 100 km. RCM memerlukan sumber daya komputer yang hampir sama dengan menjalankan GCM. RCM memiliki kemampuan dalam mensimulasikan proses-proses atmosfer pada skala menengah, seperti curah hujan orografis dan konveksi awan atau skala tinggi, seperti turbulensi. Contoh dari RCM adalah Weather Research Forecasting (WRF) (Skamarock et al. 2019).\n\nAda dua cara dalam melakukan metode downscaling, yaitu statistik dan dinamik.\nTeknik dynamical downscaling dapat menjalankan simulasi berbagai proses fisika (termodinamika, kekekalan energi, dan gerak) untuk setiap skala piksel. Teknik ini membutuhkan kondisi batas menggunakan data GCM dan perlu menentukan pemilihan lokasi spesifik. Teknik ini merujuk pada penggunaan RCM untuk meningkatkan skala spasial dan temporal. Model iklim regional meliputi komponen dinamik, fisik, maupun kimia. Komponen dinamik atmosfer memperhitungkan komponen fisika atmosfer yang mencakup proses-proses fisik, seperti radiasi gelombang panjang dan pendek, presipitasi, dan proses pertukaran energi di permukaan bumi atau laut. Proses pada skala sub-piksel dimodelkan oleh berbagai skema parameterisasi yang tentunya dapat berasal dari perhitungan matematika (integral atau diferensial) serta statistik. Model dynamical downscaling telah tersedia banyak saat ini, seperti Weather Research Forecasting (WRF), ICTP Regional Climate Model (RegCM), Hadley Centre Regional Climate Model (HadRM), The Regional Climate Model (REMO), dan The Model for Prediction Across Scale (MPAS). Model WRF akan dijelaskan pada modul ini, mulai dari instalasi hingga menampilkan hasil.\nWRF merupakan salah satu model dynamical downscaling yang saat ini telah berkembang pesat dengan tujuan riset dan operasional. WRF memiliki spesifikasi dalam berbagai aplikasi prediksi di dalam sistem bumi, seperti kimia atmosfer, hidrologi, kebakaran hutan, siklon, dan iklim regional. Selain simulasi dalam skala regional, WRF telah mampu menjalankan simulasi fenomena cuaca mikro cukup akurat, seperti turbulensi (Talbot et al. 2012) (Xu et al. 2018) (Bao et al. 2018). Sebanyak lebih dari 36.000 pengguna WRF tersebar di 162 negara, termasuk Indonesia yang telah menggunakan WRF untuk kebutuhan operasional (Powers et al. 2017). Ada dua jenis model WRF berdasarkan penyelesaian persamaan aliran fluida atmosfer, yaitu Advanced Research WRF (ARW) dan Nonhydrostatic Mesoscale Model (NMM). WRF-ARW dikembangkan oleh National Centre of Atmosphere Research (NCAR), sedangkan WRF-NMM dikembangkan oleh National Centre of Environmental Prediction (NCEP) (Skamarock et al. 2019). Secara umum, WRF mampu melakukan simulasi beberapa komponen Numerical Weather Prediction (NWP) Gambar 2. Berdasarkan aplikasi tertentu, WRF memiliki beberapa turunan model, seperti WRF-Chem (kimia atmosfer), WRF-Hydro (hidrologi), dan WRF-Fire (kebakaran hutan dan lahan).\n\n\n\n\n\n\nGambar 2: Proses secara umum perlu diparameterisasi di dalam model iklim (Sonkaew et al.)\n\n\n\nWRF diimplementasikan dalam bahasa pemrograman komputer. Jika Anda melihat repositori github WRF, jenis bahasa pemrograman yang paling banyak digunakan adalah Fortran yang berisikan algoritme berbagai perhitungan fisika dan kimia. Model WRF dapat dijalankan pada personal komputer hingga super komputer. Sebenarnya, Anda dapat menjalankan WRF dengan hanya 1 prosesor, tetapi mungkin membutuhkan waktu lama akibat dari resolusi spasial dan temporal yang tinggi, serta cakupan pemilihan wilayah yang cukup luas. Proses perhitungan model dinamik maupun fisik akan lebih cepat apabila memakai banyak prosesor atau yang bisa disebut dengan komputasi paralel. Kerangka kerja perangkat lunak WRF mendukung komputasi paralel yang efisien pada berbagai platform komputasi. Model atmosfer membawa kumpulan komputasi yang sama di setiap piksel vertikal maupun horizontal Gambar 3. Kita mungkin telah mengenal jenis prosesor yang tersedia saat ini, seperti Intel dan AMD. Jenis prosesor yang dibuat dapat mempengaruhi kecepatan proses perhitungan. Untuk perhitungan paralel, Anda dapat menggunakan tipe prosesor desktop, mobile (prosesor di laptop), maupun server, tetapi juga perlu memperhatikan banyaknya core maupun frekuensi yang tertera pada setiap tipe prosesor.\n\n\n\n\n\n\nGambar 3: Ilustrasi Model Iklim\n\n\n\nTerkait dengan bahasa pemrograman yang digunakan di dalam WRF, yaitu bahasa Fortran dan C, kode skrip terlebih dahulu harus dikompilasi dengan program Compiler. Compiler ini bertujuan mengubah bahasa dari kode yang diketik menjadi bahasa mesin. Ada berbagai macam program Compiler yang tersedia secara gratis, salah satunya adalah GNU Compiler Collection (gcc). Selain GNU, perusahaan seperti Intel, AMD, maupun NVIDIA juga memiliki program Compiler yang dapat digunakan secara gratis serta mendukung komputasi paralel. Di dalam modul praktikum ini, Anda dapat memilih salah satu dari dua Compiler yang akan dijelaskan, yaitu GNU atau Intel. Kami mencoba melakukan simulasi WRF dengan 10 kali ulangan pada dua tipe Compiler dan Prosesor. Perbedaan penggunaan tipe Compiler serta Prosesor dapat mempengaruhi waktu simulasi Gambar 4.\n\n\n\n\n\n\nGambar 4: Perbedaan waktu simulasi WRF pada tipe Compiler, Distro, dan Prosesor yang digunakan",
    "crumbs": [
      "WRF Model",
      "Overview"
    ]
  },
  {
    "objectID": "praktikum-1.html#pendahuluan",
    "href": "praktikum-1.html#pendahuluan",
    "title": "Dynamical Downscaling: Model Weather Research Forecasting (WRF)",
    "section": "",
    "text": "Global Climate Model (GCM) adalah alat yang digunakan dalam mensimulasikan keadaan iklim pada masa lalu, masa sekarang, maupun masa depan. GCM memiliki kemampuan dalam melakukan simulasi variabilitas iklim, sifat-sifat fisis, serta kimia di bumi dengan perhitungan secara matematis yang menggambarkan proses interaksi dan timbal balik pada komponen atmosfer, lautan, dan biotik. Kelemahan dalam GCM adalah ketidakmampuan menangkap kejadian-kejadian iklim pada skala regional maupun lokal karena memiliki resolusi spasial yang kecil, yaitu sekitar &gt;100 km. Ketidakmampuan GCM dalam menjelaskan keadaan iklim secara regional maupun lokal disebabkan oleh keterbatasan sumber daya komputasi. Seiring dengan berkembangnya teknologi komputasi, beberapa instansi seperti Met Office Hadley Center, National Center for Atmospheric Research (NCAR), dan European Centre for Medium-Range Weather Forecasts (ECMWF) telah mengembangkan GCM yang mampu menjelaskan fenomena-fenomena cuaca pada skala regional dengan sumber daya komputer yang sangat tinggi. Teknologi komputasi saat ini sangat memudahkan bagi para pengembang GCM, terutama dalam kecepatan eksekusi algoritme prakiraan cuaca numerik. Contohnya, model prakiraan cuaca dari ECMWF, yaitu Integrated Forecasts System (IFS) memiliki resolusi spasial sekitar 9 km. Apakah dengan berkembangnya GCM yang sudah bisa menjelaskan fenomena regional telah menggantikan Regional Climate Model (RCM)? Tentu saja tidak. Model iklim regional tentu masih dapat digunakan untuk mensimulasikan fenomena cuaca pada skala lokal maupun mikro, sebagai contoh turbulensi dan proses konveksi awan kumulus yang tidak dapat dijelaskan oleh GCM (Gambar 1).\n\n\n\n\n\n\nGambar 1: Resolusi model iklim dalam mensimulasikan berbagai fenomena cuaca\n\n\n\nMetode downscaling merupakan suatu cara dalam mendapatkan informasi spesifik pada suatu wilayah tertentu dengan resolusi tinggi, baik spasial maupun temporal. Metode downscaling di dalam ilmu iklim umum digunakan pada aplikasi dalam bidang hidrologi (Piani, Weedon, et al. 2010), pertanian (Glotter et al. 2014), dan iklim perkotaan (Smid and Costa 2018). Misalnya dalam bidang hidrologi, teknik downscaling digunakan untuk pemodelan debit sungai dan banjir (Piani, Haerter, et al. 2010). Wilby dan Wigley (Wilby and Wigley 1997) mengelompokkan teknik downscaling menjadi 4 kategori, yaitu\n\nRegresi\nMetode regresi merupakan metode downscaling paling awal yang telah digunakan pada kajian perubahan iklim. Hal ini dapat dibuktikan dari penelitian oleh Kim pada tahun 1984 (Kim et al. 1984). Pendekatan ini secara umum membangun hubungan linier atau non-linier antara parameter titik lokasi dengan prediktor variabel dari resolusi kasar. Contoh dari metode ini adalah regresi linier sederhana, regresi linier berganda, Artificial Neural Network (ANN), regresi komponen utama (Principle Component Regression/PCR), dan lain sebagainya. Sudah banyak penelitian yang menerapkan metode ini untuk kajian perubahan iklim (Huth and Kyselỳ 2000; Goly et al. 2014; Sachindra et al. 2014; Pahlavan et al. 2018).\nPola cuaca\nMetode ini dibangun dari hubungan statistik dari variabel cuaca di stasiun observasi atau rata-rata area dengan klasifikasi cuaca tertentu yang dapat diturunkan secara obyektif maupun subyektif. Metode ini secara obyektif dapat meliputi komponen utama, Canonical Correlation Analyses (CCA), aturan Fuzzy, dan Neural Networks. Contoh prosedur pengelompokkan pola cuaca, yaitu European Grosswetterlagen dan British Isles Lamb Weather Types.\nStokastik\nModel WGEN (Richardson 1981) merupakan contoh dari pendekatan ini. Model ini memiliki kemampuan dalam membangkitkan data curah hujan harian berdasarkan peluang kejadian hujan (hujan dan tidak hujan) dengan rantai Markov order satu. Model ini telah digunakan dalam kajian perubahan iklim dan analisis dampak. Model stokastik yang telah diperoleh dari data observasi deret waktu dapat divalidasi dengan GCM dan perlu dikalibrasi terlebih dahulu.\nLimited-area climate models (LAM)\nMetode terakhir untuk melakukan downscaling terhadap GCM adalah dengan menyematkan model iklim dengan area terbatas. Sebenarnya, LAM pada saat ini dapat diistilahkan sebagai Regional Climate Model (RCM). RCM memiliki resolusi spasial kurang dari 100 km. RCM memerlukan sumber daya komputer yang hampir sama dengan menjalankan GCM. RCM memiliki kemampuan dalam mensimulasikan proses-proses atmosfer pada skala menengah, seperti curah hujan orografis dan konveksi awan atau skala tinggi, seperti turbulensi. Contoh dari RCM adalah Weather Research Forecasting (WRF) (Skamarock et al. 2019).\n\nAda dua cara dalam melakukan metode downscaling, yaitu statistik dan dinamik.\nTeknik dynamical downscaling dapat menjalankan simulasi berbagai proses fisika (termodinamika, kekekalan energi, dan gerak) untuk setiap skala piksel. Teknik ini membutuhkan kondisi batas menggunakan data GCM dan perlu menentukan pemilihan lokasi spesifik. Teknik ini merujuk pada penggunaan RCM untuk meningkatkan skala spasial dan temporal. Model iklim regional meliputi komponen dinamik, fisik, maupun kimia. Komponen dinamik atmosfer memperhitungkan komponen fisika atmosfer yang mencakup proses-proses fisik, seperti radiasi gelombang panjang dan pendek, presipitasi, dan proses pertukaran energi di permukaan bumi atau laut. Proses pada skala sub-piksel dimodelkan oleh berbagai skema parameterisasi yang tentunya dapat berasal dari perhitungan matematika (integral atau diferensial) serta statistik. Model dynamical downscaling telah tersedia banyak saat ini, seperti Weather Research Forecasting (WRF), ICTP Regional Climate Model (RegCM), Hadley Centre Regional Climate Model (HadRM), The Regional Climate Model (REMO), dan The Model for Prediction Across Scale (MPAS). Model WRF akan dijelaskan pada modul ini, mulai dari instalasi hingga menampilkan hasil.\nWRF merupakan salah satu model dynamical downscaling yang saat ini telah berkembang pesat dengan tujuan riset dan operasional. WRF memiliki spesifikasi dalam berbagai aplikasi prediksi di dalam sistem bumi, seperti kimia atmosfer, hidrologi, kebakaran hutan, siklon, dan iklim regional. Selain simulasi dalam skala regional, WRF telah mampu menjalankan simulasi fenomena cuaca mikro cukup akurat, seperti turbulensi (Talbot et al. 2012) (Xu et al. 2018) (Bao et al. 2018). Sebanyak lebih dari 36.000 pengguna WRF tersebar di 162 negara, termasuk Indonesia yang telah menggunakan WRF untuk kebutuhan operasional (Powers et al. 2017). Ada dua jenis model WRF berdasarkan penyelesaian persamaan aliran fluida atmosfer, yaitu Advanced Research WRF (ARW) dan Nonhydrostatic Mesoscale Model (NMM). WRF-ARW dikembangkan oleh National Centre of Atmosphere Research (NCAR), sedangkan WRF-NMM dikembangkan oleh National Centre of Environmental Prediction (NCEP) (Skamarock et al. 2019). Secara umum, WRF mampu melakukan simulasi beberapa komponen Numerical Weather Prediction (NWP) Gambar 2. Berdasarkan aplikasi tertentu, WRF memiliki beberapa turunan model, seperti WRF-Chem (kimia atmosfer), WRF-Hydro (hidrologi), dan WRF-Fire (kebakaran hutan dan lahan).\n\n\n\n\n\n\nGambar 2: Proses secara umum perlu diparameterisasi di dalam model iklim (Sonkaew et al.)\n\n\n\nWRF diimplementasikan dalam bahasa pemrograman komputer. Jika Anda melihat repositori github WRF, jenis bahasa pemrograman yang paling banyak digunakan adalah Fortran yang berisikan algoritme berbagai perhitungan fisika dan kimia. Model WRF dapat dijalankan pada personal komputer hingga super komputer. Sebenarnya, Anda dapat menjalankan WRF dengan hanya 1 prosesor, tetapi mungkin membutuhkan waktu lama akibat dari resolusi spasial dan temporal yang tinggi, serta cakupan pemilihan wilayah yang cukup luas. Proses perhitungan model dinamik maupun fisik akan lebih cepat apabila memakai banyak prosesor atau yang bisa disebut dengan komputasi paralel. Kerangka kerja perangkat lunak WRF mendukung komputasi paralel yang efisien pada berbagai platform komputasi. Model atmosfer membawa kumpulan komputasi yang sama di setiap piksel vertikal maupun horizontal Gambar 3. Kita mungkin telah mengenal jenis prosesor yang tersedia saat ini, seperti Intel dan AMD. Jenis prosesor yang dibuat dapat mempengaruhi kecepatan proses perhitungan. Untuk perhitungan paralel, Anda dapat menggunakan tipe prosesor desktop, mobile (prosesor di laptop), maupun server, tetapi juga perlu memperhatikan banyaknya core maupun frekuensi yang tertera pada setiap tipe prosesor.\n\n\n\n\n\n\nGambar 3: Ilustrasi Model Iklim\n\n\n\nTerkait dengan bahasa pemrograman yang digunakan di dalam WRF, yaitu bahasa Fortran dan C, kode skrip terlebih dahulu harus dikompilasi dengan program Compiler. Compiler ini bertujuan mengubah bahasa dari kode yang diketik menjadi bahasa mesin. Ada berbagai macam program Compiler yang tersedia secara gratis, salah satunya adalah GNU Compiler Collection (gcc). Selain GNU, perusahaan seperti Intel, AMD, maupun NVIDIA juga memiliki program Compiler yang dapat digunakan secara gratis serta mendukung komputasi paralel. Di dalam modul praktikum ini, Anda dapat memilih salah satu dari dua Compiler yang akan dijelaskan, yaitu GNU atau Intel. Kami mencoba melakukan simulasi WRF dengan 10 kali ulangan pada dua tipe Compiler dan Prosesor. Perbedaan penggunaan tipe Compiler serta Prosesor dapat mempengaruhi waktu simulasi Gambar 4.\n\n\n\n\n\n\nGambar 4: Perbedaan waktu simulasi WRF pada tipe Compiler, Distro, dan Prosesor yang digunakan",
    "crumbs": [
      "WRF Model",
      "Overview"
    ]
  },
  {
    "objectID": "praktikum-1.html#pemrograman-bash",
    "href": "praktikum-1.html#pemrograman-bash",
    "title": "Dynamical Downscaling: Model Weather Research Forecasting (WRF)",
    "section": "Pemrograman Bash",
    "text": "Pemrograman Bash\nSebagai salah satu tool scripting yang umum digunakan pada Linux, Bash (Bourne Again Shell) sangat bermanfaat bagi para penggunanya. Sebagian besar dalam menjalankan model iklim, Bash digunakan untuk menjalankan instalasi, simulasi, sampai pada analisis data. Pengguna model iklim disarankan mempelajari dasar-dasar pemrograman ini agar memahami berbagai perintah dari cara kerja instalasi dan simulasi dari model iklim tertentu. Para pengembang model iklim biasanya menyediakan dokumen User Guide. File ini berisi mengenai cara instalasi, simulasi, informasi file, dan berbagai aplikasi tambahan dalam mengoperasikan/menjalankan model iklim tersebut. Bagi para pengguna Windows atau MacOS, perhatikan subbab di bawah ini.\n\nPemrograman Bash pada Sistem Operasi Windows\nBagi Anda yang memiliki sistem operasi Windows, Anda diharuskan memasang Windows Subsystem Linux (WSL) untuk dapat menjalankan Bash. Untuk menjalankan WRF, Anda memerlukan sistem operasi berbasis Linux dengan distribusi yang tersedia saat ini. Pada modul ini, distro Ubuntu dipilih untuk simulasi WRF. WSL dapat digunakan bagi pengguna Windows 10/11. WSL dapat dijalankan pada Windows 10/11 dan Windows Server 2019 dengan versi minimum 1803. Saat ini, WSL versi 2 (WSL-2) telah tersedia yang dapat berjalan pada Windows 10 versi 1903 ke atas. Kami merekomendasikan Anda untuk memasang WSL-2 daripada WSL-1 karena prosesnya lebih cepat. Untuk mengaktifkan WSL, Anda dapat mengikuti beberapa langkah berikut ini.\n\nUnduh WSL-2 pada halaman ini dan Install.\nBuka menu Control Panel dan cari Program and Features\nKlik Turn Windows Features On or Off\nScroll ke paling bawah. Kemudian, aktifkan tanda centang pada Windows Subsystem for Linux, Windows Hypervisor Platform, dan Virtual Machine Platform. Sebagai catatan, Anda perlu memeriksa apakah laptop telah teraktivasi fitur Virtualization Technology. Untuk memeriksanya, Anda perlu masuk ke menu BIOS (setiap merk laptop memiliki cara yang berbeda, seperti menekan tombol F2 / Fn + F2 pada merk ASUS).\nTunggu proses update sampai selesai, kemudian klik Restart Now (pastikan simpan data-data pekerjaan dan tutup semua aplikasi)\nSetelah proses restart selesai, cari aplikasi dan unduh Ubuntu pada Microsoft Store\nBuka aplikasi Ubuntu yang telah terunduh dan tunggu konfigurasi selesai\nMasukkan Username dan Password (Catatan: disarankan sama dengan user dan password Windows 10/11, tetapi boleh beda. Hasil ketikan password tidak muncul di terminal)\nKetikkan pada terminal\nsudo apt update\nsudo apt upgrade -y\nAnda juga dapat membuka terminal Ubuntu pada terminal Windows PowerShell atau Command Prompt dengan mengetik wsl atau wsl.exe\n\nSelain WSL, Anda juga dapat menggunakan Cygwin atau MinGW, hanya saja Anda perlu memilih beberapa paket yang akan digunakan. Tentu cara ini sangat rumit dan membutuhkan waktu cukup lama saat instalasi.\n\n\nPemrograman Bash pada MacOS\nAplikasi terminal pada MacOS sudah mendukung Bash, untuk arsitektur arm64 (MacBook M1/M2/M3) maupun Intel. Anda dapat mengikuti atau melewati langkah ini dalam memasang aplikasi Docker yang digunakan dalam pemasangan Model WRF.\n\nUnduh dan pasang Xcode dengan perintah berikut.\nxcode-select --install\nSetelah proses instalasi selesai, Anda dapat mengecek versi Xcode dengan perintah berikut.\nxcode-select -p\nJika versi Xcode sudah muncul, maka proses instalasi sudah selesai.\nUnduh dan pasang Docker untuk MacOS berdasarkan prosesor pada link di bawah ini.\n\nMacOS Intel\nMacOS M1 atau M2\n\nBuka aplikasi Docker melalui menu atau melalui terminal dengan perintah berikut ini.\nopen -a Docker\nJendela Docker Desktop akan muncul.\nKemudian, tutup aplikasi Docker Desktop. Perintah ini tidak memberhentikan proses Docker, hanya menutup mode GUI-nya saja. Aplikasi Docker masih terus berjalan apabila ada icon Docker pada notifikasi.\n\n\n\n\nIcon Docker\n\n\n\nBukalah terminal\nKetikkan perintah berikut untuk mengunduh image Ubuntu versi 20.04\ndocker pull ubuntu:20.04\nUntuk menjalankan image, ketikkan perintah berikut.\ndocker run -it --name wrf-ubuntu ubuntu:20.04\nPerintah ini menjalankan image Ubuntu versi 20.04 dan masuk ke container dengan nama wrf-ubuntu. Anda dapat mengetikkan perintah-perintah Bash di dalam container ini.\nTerdapat beberapa perintah yang belum tersedia seperti pada Ubuntu versi Desktop maupun WSL. Misalnya perintah nano, wget, bash-completion, dan git. Untuk mengunduhnya, ketikkan perintah berikut.\napt update\napt -y install nano wget git bash-completion\n\n\n\n\n\n\nCatatan\n\n\n\nUntuk selanjutnya, Anda tidak perlu mengetik perintah sudo (seperti pada WSL) di dalam terminal Docker karena Anda sudah masuk sebagai root.\n\n\nUntuk keluar dari container Ubuntu, ketikkan perintah exit atau dengan shortcut Ctrl + D.\nJika Anda ingin menjalankan container Ubuntu yang sudah dibuat sebelumnya, ketikkan perintah berikut.\n\ndocker start -i wrf-ubuntu\nPenggunaan Docker pada MacOS HANYA untuk menjalankan WRF saja. Selebihnya pada tahapan analisis/visualisasi data, Anda dapat menggunakan software lain yang masih mendukung MacOS.\n\n\nDasar-dasar Pemrograman Bash\nBash merupakan terminal shell umum pada Linux. Anda bisa menjalankan shell lain, seperti ksh (Korn Shell), zsh, dan csh (C shell). Untuk menjalankan Bash, Anda bisa menekan Ctrl+Alt+T atau carilah aplikasi Terminal. Khusus Windows 10, Anda dapat mencari aplikasi “Ubuntu” atau “wsl.exe”. Tampilan Bash seperti pada Gambar 5. Tulisan menunjukkan nama user dan tanda berarti menunjukkan lokasi folder saat ini.\n\n\n\n\n\n\nGambar 5: Bash pada Ubuntu\n\n\n\nJika Anda mengetik perintah pwd pada Bash, hasilnya adalah seperti di bawah ini atau bisa dilihat pada Gambar 6.\n\n\n\n\n\n\nGambar 6: Perintah pwd pada terminal Bash\n\n\n\nPerintah dasar lainnya yang sering digunakan oleh pengguna Linux adalah ls atau ll (Gambar 7). Perintah ini berfungsi untuk melihat nama folder dan file yang berada di direktori pada lokasi saat ini. Untuk berpindah lokasi folder, Anda dapat mengetik perintah cd dan pilih folder yang ingin dibuka, contohnya cd Documents/ atau cd Documents (Gambar 8). Anda dapat kembali ke folder sebelumnya dengan mengetik perintah cd ..\n\n\n\n\n\n\nGambar 7: Perintah ls pada terminal Bash\n\n\n\n\n\n\n\n\n\nGambar 8: Perintah cd pada terminal Bash\n\n\n\nAnda dapat membuat folder baru dengan perintah mkdir, memindahkan folder atau file dengan mv, menghapus file dengan rm, menghapus folder dengan rmdir, membuat file baru dengan touch, dan menyalin folder atau file dengan cp. Contoh penggunaan beberapa perintah tersebut dapat dilihat sebagai berikut.\n\nMisalkan kita ingin membuat folder Tes-folder\nmkdir Tes-folder\nAnda juga dapat membuat lebih dari 1 folder, misalnya Tes-folder-1 dan Tes-folder-2\nmkdir Tes-folder-1 Tes-folder-2\nUntuk memastikan ketiga folder tersebut telah dibuat, ketik perintah ls\nls\nMisalkan kita ingin membuat file tes-file di dalam folder Tes-folder. Perintah touch bertujuan membuat file kosong.\ncd Tes-folder\ntouch tes-file\nls\nKemudian, file tes-file kita pindahkan ke direktori sebelumnya dan diganti namanya dengan tes-file-pindah\nmv tes-file ../tes-file-pindah\nKembali ke folder sebelumnya\ncd ..\nKetik perintah ls untuk memastikan file tes-file telah dipindahkan ke direktori sebelumnya dengan berubah nama menjadi tes-file-pindah\nls \nFile tes-file-pindah dihapus menggunakan perintah rm\nrm tes-file-pindah\nls\nUntuk menghapus folder, misalkan Tes-folder-1, Anda dapat menggunakan perintah rm dengan ditambahkan parameter -rf.\nrm -rf Tes-folder-1\n\n\n\n\n\n\n\nPerhatian\n\n\n\nHati-hati dalam menggunakan parameter -rf karena folder yang telah dihapus beserta file-file di dalamnya tidak berada di dalam Recycle Bin",
    "crumbs": [
      "WRF Model",
      "Overview"
    ]
  },
  {
    "objectID": "praktikum-1.html#instalasi-software-pengolahan-data-dan-model-wrf",
    "href": "praktikum-1.html#instalasi-software-pengolahan-data-dan-model-wrf",
    "title": "Dynamical Downscaling: Model Weather Research Forecasting (WRF)",
    "section": "Instalasi Software Pengolahan Data dan Model WRF",
    "text": "Instalasi Software Pengolahan Data dan Model WRF\nPada tahapan ini, Kami menjelaskan mengenai tahapan instalasi aplikasi pengolahan data pendukung untuk memproses data luaran WRF serta instalasi model WRF di Ubuntu versi 20.04 (Ubuntu versi Desktop dan WSL) maupun MacOS Ventura. Saat kami menguji WRF di Ubuntu maupun MacOS Ventura, proses instalasi serta simulasi tidak mengalami masalah.\n\nInstalasi Software Pengolahan Data\n\nNCAR Command Language (NCL) dan Python\nNCL merupakan bahasa pemrograman interpreter yang dikembangkan oleh National Centre of Atmospheric Research (NCAR) dan memiliki kegunaan dalam proses analisis dan visualisasi data-data geosains. Untuk aplikasi pada model WRF, NCL dibutuhkan dalam memvisualisasikan lokasi kajian sebelum disimulasikan. Pengembang WRF telah menyediakan skrip NCL untuk memudahkan dalam ketepatan pemilihan lokasi sesuai dengan keinginan pengguna. Python merupakan bahasa pemrograman general yang memiliki banyak kegunaan, khususnya dalam analisis dan visualisasi data-data dengan tambahan modul (packages). Dalam menuliskan kode Python, Anda dapat menggunakan teks editor yang umum digunakan seperti Jupyter Notebook. Modul Python yang dipakai di dalam praktikum ini adalah wrf-python yang telah dikembangkan oleh NCAR juga. Langkah-langkah pemasangan NCL dan Python sebagai berikut.\n\nUntuk memasang NCL, Anda harus mengunduh aplikasi Miniconda untuk Linux pada website https://repo.anaconda.com/miniconda/Miniconda3-py39_22.11.1-1-Linux-x86_64.sh dengan perintah pada terminal Bash sebagai berikut.\nwget https://repo.anaconda.com/miniconda/Miniconda3-py39_22.11.1-1-Linux-x86_64.sh\nAnda tidak dapat menggunakan NCL pada sistem operasi Windows, kecuali Anda memiliki Windows Subsystem Linux (WSL).\nKemudian, lakukan pemasangan Miniconda dengan perintah di bawah ini.\nbash Miniconda3-py39_22.11.1-1-Linux-x86_64.sh\nSelanjutnya tekan ENTER. Terminal akan menampilkan End-User License Agreement (EULA), tekan ENTER atau SPACE sampai muncul perintah seperti di bawah ini.\nDo you accept the license terms? [yes|no]\n[no] &gt;&gt;&gt;\nKemudian, ketikkan yes untuk melanjutkan proses instalasi dan tekan ENTER. Secara otomatis, Python sebenarnya telah terpasang di dalam Miniconda.\n\nTutup terminal Anda dan buka kembali. Perhatikan pada tulisan (base) di paling kiri nama user. Jika tulisan tersebut sudah muncul, proses pemasangan Miniconda telah berhasil.\nLakukan proses pembuatan environment dengan nama ncl dan pemasangan NCL beserta package lainnya dengan perintah.\nconda create -n ncl\nconda activate ncl\nconda install -c conda-forge jupyter notebook xarray netcdf4 scipy pyngl pynio matplotlib cartopy wrf-python ncl \nSaat Anda ingin memulai menggunakan program NCL, aktifkan terlebih dahulu environment ncl dengan perintah di bawah ini. Kemudian, tulisan (base) menjadi (ncl) yang menandakan bahwa environment telah berhasil diaktifkan.\nconda activate ncl\nUntuk membuka Jupyter Notebook, gunakan perintah ini. Aplikasi akan muncul pada browser bawaan Anda (Google Chrome, Microsoft Edge, atau Safari).\njupyter notebook\nUntuk menutup Jupyter Notebook, Anda dapat menekan tombol CTRL+C pada terminal.\nUntuk keluar dari environment ncl, ketikkan perintah conda deactivate.\n\nBagi para pengguna MacOS M1/M2/M3, pemasangan NCL dan wrf-python tidak dapat melalui Miniconda. NCL dipasang menggunakan MacPorts, sedangkan wrf-python dipasang menggunakan pip. Langkah-langkahnya sebagai berikut.\n\nUnduh dan pasang MacPorts pada https://www.macports.org/install.php\nBuka terminal dan ketikkan perintah berikut.\nsudo port install ncl\nPada file ~/.bash_profile atau ~/.zshrc, tambahkan perintah berikut ini dan letakkan pada baris paling bawah.\nexport NCARG_ROOT=/opt/local\nSelanjutnya, sebelum memasang wrf-python dengan pip, Anda perlu membuat environment ncl dengan conda serta pasang juga python versi 3.10. Secara otomatis, modul pip akan terpasang. `bash conda create -n ncl -c conda-forge python=3.10 conda activate ncl\nKemudian, pasang wrf-python serta modul lainnya (netcdf4 dan cartopy) menggunakan pip.\npip install wrf-python netcdf4 cartopy\n\n\n\n\n\n\n\nCatatan\n\n\n\nEnvironment ncl akan terus dipakai, mulai dari pemasangan WRF hingga analisis dan visualisasi luaran WRF\n\n\n\n\nR dan RStudio\nSama seperti Python dan NCL, R merupakan bahasa pemrograman interpreter, namun dibuat secara khusus untuk analisis dan visualisasi data-data statistik. Beberapa package R telah dikembangkan untuk memudahkan proses analisis data-data cuaca dan iklim, seperti ncdf4, raster, dan metR. RStudio umum digunakan dalam mengetik bahasa pemrograman R secara interaktif. Untuk menuliskan skrip R, dibutuhkan aplikasi teks editor, salah satunya adalah RStudio. RStudio mendukung bukan hanya menuliskan skrip R, melainkan bahasa pemrograman lainnya, seperti Markdown, C++, Javascript, dan Python. Sebenarnya, Anda dapat menuliskan skrip Python pada RStudio dengan bantuan package reticulate. Hanya saja di dalam modul ini, Kami menggunakan Jupyter Notebook untuk menuliskan skrip Python.\nUntuk mengunduh R dan RStudio Desktop, Anda dapat menggunakan halaman website di bawah ini sesuai dengan sistem operasi yang Anda gunakan. Bagi pengguna Windows, Anda diharuskan mengunduh aplikasi Rtools karena beberapa paket tertentu membutuhkan kompilasi dengan Compiler GNU pada saat proses instalasi, seperti raster, tidyverse, dan ncdf4.\n\nR\n\nWindows 10/11: https://cran.r-project.org/bin/windows/base/R-4.2.2-win.exe\nMacOS (Intel): https://cran.r-project.org/bin/macosx/base/R-4.2.2.pkg\nMacOS (ARM, M1/M2): https://cran.r-project.org/bin/macosx/big-sur-arm64/base/R-4.2.2-arm64.pkg\nUbuntu: ikuti perintah dan langkah-langkah di https://cran.r-project.org/bin/linux/ubuntu\n\nRStudio\n\nWindows 10/11: https://download1.rstudio.org/electron/windows/RStudio-2022.12.0-353.exe\nMacOS (Intel/ARM): https://download1.rstudio.org/electron/macos/RStudio-2022.12.0-353.dmg\nUbuntu 22.04 LTS: https://download1.rstudio.org/electron/jammy/amd64/rstudio-2022.12.0-353-amd64.deb\n\n\n\n\nJulia\nBahasa pemrograman ini relatif baru dibandingkan dengan Python dan R. Sama seperti keduanya, Julia merupakan bahasa pemrograman interpreter dan tersedia gratis. Pengembang Julia mengatakan bahwa bahasa ini memiliki kecepatan eksekusi secepat bahasa C/C++. Artinya, kecepatan eksekusi Julia berpotensi lebih cepat daripada Python maupun R. Anda dapat mengunduh Julia di julialang.org sesuai dengan sistem operasi yang Anda miliki. Untuk membaca data netcdf dari WRF, Anda dapat menggunakan package NetCDF.jl. Anda perlu memasang package tersebut pada terminal interaktif Julia. Untuk menuliskan skrip Julia, Anda dapat memanfaatkan Jupyter Notebook dan tentunya memerlukan package IJulia.jl. Berikut ini adalah langkah-langkahnya.\n\nBuka terminal interaktif Julia (julia) dan ketikkan perintah berikut untuk memasang package NetCDF.jl dan IJulia.jl.\nusing Pkg\nPkg.add(\"NetCDF\")\nPkg.add(\"IJulia\")\nSetelah berhasil memasang package, Anda dapat menuliskan skrip Julia pada Jupyter Notebook. Untuk membuka Jupyter Notebook, ketikkan perintah berikut pada terminal interaktif Julia.\nusing IJulia\nnotebook()\nSkrip tersebut akan mengeksekusi instalasi miniconda di dalam Julia dengan disertai Jupyter Notebook. Jika instalasi berhasil, Jupyter Notebook akan terbuka di browser Anda (Google Chrome, Microsoft Edge, atau Safari). Untuk menutup Jupyter Notebook, Anda dapat menekan tombol CTRL+C pada terminal interaktif Julia.\nPersiapan\n\nSebelum menuju ke tahapan instalasi WRF, dasar-dasar perintah Bash mutlak dikuasai. Ini karena model WRF dibagun dengan bahasa C dan Fortran, di mana Anda perlu mengkompilasi source code WRF dengan Compiler (GNU/Intel) dan kemudian dapat dijalankan dengan perintah Bash. Langkah-langkah pada subbab selanjutnya, Anda akan disajikan cara mengubah isi di dalam file konfigurasi untuk menjalankan WRF dengan teks editor, yaitu nano. nano adalah salah satu teks editor yang bekerja pada terminal Bash, sama seperti Notepad pada Windows, hanya saja berbasis pada terminal. Anda juga dapat menggunakan teks editor lainnya, seperti nvim, tetapi jika sudah terbiasa. Untuk mulai menggunakan nano, Anda hanya cukup mengetikkan perintah di bawah ini. &lt;nama_file&gt; adalah nama dari file yang akan diubah atau dibuat jika belum tersedia pada direktori saat ini. Jika ingin keluar, tekan tombol CTRL + X dan pilih Y untuk menyimpan perubahan atau N untuk membatalkan perubahan, kemudian tekan ENTER.\nnano nama_file\nIkutilah langkah-langkah di bawah ini agar memudahkan Anda mengerjakan praktikum ini.\n\nBuka terminal Bash\n\nUntuk Windows 10/11, buka aplikasi Windows Power Shell. Kemudian, ketikkan perintah seperti di bawah ini. Setelahnya, terminal Bash akan muncul.\nwsl\nUntuk Ubuntu atau distro Linux lainnya dan MacOS tanpa Docker, carilah program Terminal. Untuk MacOS, Anda dapat menggunakan aplikasi terminal lain seperti iTerm2.\nUntuk MacOS M1/M2 yang menggunakan Docker, jalankan image Ubuntu versi 20.04 pada Terminal dengan perintah di bawah ini.\ndocker run -it --name wrf-ubuntu ubuntu:20.04\n\nSaat Anda membuka terminal, pastikan lokasi folder saat ini adalah /home/&lt;user_name&gt;, di mana user_name adalah nama pengguna pada laptop/komputer Anda masing-masing. Perhatikan kembali Gambar 6 bahwa untuk melihat lokasi folder Anda sekarang bisa mengetik perintah pwd pada terminal atau dengan melihat simbol ~ yang terletak di sebelah kiri $. Khusus Docker, lokasi direktori saat ini adalah /. Lokasi $HOME berada di folder /root.\ncd $HOME\nBuat folder kerja dengan nama WRF-Model untuk menampung data-data, package, serta source code WRF. Perintah pada terminal Bash adalah sebagai berikut.\nmkdir WRF-Model\nKemudian, bukalah folder WRF-Model (atau dengan nama lainnya) dengan perintah\ncd WRF-Model\nSekarang, Anda berada di folder WRF-Model (Perhatikan ~ berubah menjadi ~/WRF-Model)\nDi dalam WRF-Model, buatlah folder data guna untuk meletakkan data masukan WRF (data statik dan data cuaca).\nUnduh source code WPS (WRF Pre-Processing) dan WRF pada halaman Github NCAR. Source code WRF berisikan algoritma perhitungan fisik dan dinamik atmosfer, sedangkan WPS berisikan algoritma persiapan data masukan atmosfer dari GCM, pemilihan lokasi, dan penentuan periode simulasi. Gunakan perintah di bawah ini untuk mengunduh WPS dan WRF.\n# 1. Unduh WPS\ngit clone https://www.github.com/wrf-model/WPS\n# 2. Unduh WRF\ngit clone https://www.github.com/wrf-model/WRF\n\nLangkah-langkah di atas masih berlanjut pada subbab selanjutnya.\n\n\n\nData dan Software Pendukung\n\nSoftware Pendukung\nUntuk memasang WRF, Anda perlu menyiapkan perangkat lunak pendukung serta data contoh untuk mensimulasikan WRF. Perangkat lunak tersebut dapat diunduh melalui halaman Google Drive ini di folder LIBRARIES. Setelah terunduh, pindahkan folder tersebut ke dalam folder WRF-Model. Hasil unduhan folder dari Google Drive berupa file *.zip dengan nama drive-download-.........zip. Oleh karena itu, ekstrak file tersebut setelah dipindahkan ke dalam folder WRF-Model. Anda dapat menggunakan perintah pada terminal berikut ini.\nmv $HOME/Downloads/drive-download-* $HOME/WRF-Model # Pada Ubuntu atau MacOS\n# mv /mnt/c/Users/&lt;user_name&gt;/Downloads/drive-download-* /mnt/c/Users/&lt;user_name&gt;/WRF-Model # --&gt; Pada Windows 10/11, dengan &lt;user_name&gt; adalah nama pengguna \ncd $HOME/WRF-Model\nunzip drive-download-* # Ganti simbol * menyesuaikan hasil unduhan\nmv drive-download* LIBRARIES\n\n\nData\nData-data masukan untuk WRF telah tersedia dan unduh pada halaman web https://s.id/wrf-data. Kami sarankan untuk menggunakan Wi-Fi karena ukuran data cukup besar. Data yang telah diunduh Anda pindahkan ke folder data yang berada di dalam WRF-Model.\n\n\n1. Global Forecast System (GFS)\nUntuk data masukan yang digunakan berasal dari NOAA yang bernama Global Forecasts System (GFS). GFS memiliki resolusi spasial \\(0.25^o\\) (~25 km), \\(0.50^o\\) (~50 km), dan \\(1.00^o\\) (~ 100 km). GFS memiliki produk data prakiraan maupun analisis/historis cuaca secara global dengan resolusi temporal per 1 dan 3 jam. Anda dapat mengunduh data ini pada salah satu halaman web berikut.\n\nAWS S3: https://noaa-gfs-bdp-pds.s3.amazonaws.com\nResarch Data Archive (RDA) NCAR: https://rda.ucar.edu/datasets/ds084.1\nNCEP Central Operations: https://nomads.ncep.noaa.gov/\n\nData GFS yang digunakan dalam praktikum ini memiliki waktu 1-3 Januari 2022 pada pukul 00:00, 06:00, 12:00, dan 18:00 UTC dengan resolusi spasial \\(1.00^o\\) yang telah diunduh pada halaman web AWS S3 Bucket.\n\n\n2. ERA5\nSelain GFS, Anda dapat menggunakan data masukan dari institusi lain, seperti ECMWF pada produk ERA5. ERA5 merupakan data reanalisis sehingga hanya memiliki produk historis. Anda dapat mengunduhnya melalui Climate Data Store (CDS) pada halaman https://cds.climate.copernicus.eu. ERA5 memiliki resolusi spasial sebesar \\(0.25^o\\) dengan temporal per 1 jam. Data ERA5 memiliki dua tipe, yaitu data permukaan tanah (Single Levels) dan atmosfer untuk setiap ketinggian (Pressure Levels). Anda diharuskan mengunduh dua tipe data ini dengan variabel yang dipilih adalah sebagai berikut.\n\nERA5 hourly data on Pressure Levels:\n\n\n\ngeopotential\nrelative humidity\nspecific humidity\n\n\ntemperature\nu-component wind\nv-component wind\n\n\n\nERA5 hourly data on Single Levels:\n\n\n\n\n\n\n\n\n10m u-component of wind\n10m v-component of wind\n2m dewpoint temperature\n\n\n2m temperature\nland sea mask\nmean sea level pressure\n\n\nsea ice cover\nsea surface temperature\nskin temperature\n\n\nsnow depth\nsoil temperature level 1\nsoil temperature level 2\n\n\nsoil temperature level 3\nsoil temperature level 4\nsurface pressure\n\n\nvolumetric soil water layer 1\nvolumetric soil water layer 2\nvolumetric soil water layer 3\n\n\nvolumetric soil water layer 4\n\n\n\n\n\n\nAnda tidak diharuskan mengunduh semua waktu karena CDS membatasi banyaknya permintaan data dari pengguna sehingga Anda tidak dapat mengunduh semua data sekaligus. Data ERA5 yang akan digunakan pada praktikum ini memiliki waktu yang sama dengan GFS.\n\n\n3. Data Statik WPS\nData statik ini wajib diunduh untuk menjalankan WRF. Isi data ini seperti tipe permukaan lahan, nilai Leaf Area Index (LAI), tipe tanah, dan elevasi permukaan. Anda dapat mengunduhnya di https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz. File tersebut berukuran 2 GB dan setelah diekstrak dapat mencapai 30 GB. Data ini sudah tersedia di dalam link https://s.id/wrf-data. Untuk mengekstraknya, gunakan perintah berikut.\ncd data\ngunzip geog_high_res_mandatory.tar.gz\ntar -xf geog_high_res_mandatory.tar\ncd .. # Kembali ke folder WRF-Model\nSelanjutnya, folder WPS_GEOG akan muncul di dalam folder data/\n\n\n\nInstalasi Software Compiler\nInstalasi ini meliputi cara melakukan kompilasi dengan dua Compiler berbeda, yaitu GNU dan Intel. Anda dipersilahkan memilih salah satu cara. Proses kompilasi untuk semua package yang telah terunduh tidak dapat dilakukan pada Compiler yang berbeda.\n\nGNU\n\nWSL, Linux, dan Docker\nBagi pengguna WSL, Ubuntu, serta MacOS yang menggunakan Docker, pasang terlebih dahulu package dependencies sebelum Anda memasuki tahapan instalasi package zlib, libpng, jasper, openmpi, netcdf, dan hdf5 dengan perintah di bawah ini.\nsudo apt -y update && sudo apt -y upgrade\nsudo apt -y install gfortran gcc make m4 csh g++\n\n\nMacOS\nJika MacOS Anda tidak menggunakan Docker, ikuti langkah-langkah berikut untuk memasang package dependencies.\n\nPasang aplikasi Xcode terlebih dahulu dan gunakan perintah berikut ini.\nxcode-select --install\nPerintah tersebut memunculkan jendela perintah untuk proses pemasangan Xcode. Kemudian, klik Install. Selanjutnya, muncul jendela License Agreement dan klik Agree\nSetelah pemasangan Xcode, pasanglah aplikasi homebrew dengan perintah sebagai berikut (Perhatikan tipe MacOS Anda!).\n# Untuk High Sierra, Sierra, El Capitan\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n# Untuk Ventura, Catalina, Mojave, Big Sur\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\nSetelah menjalankan perintah tersebut, ketikkan Password dan kemudian tekan ENTER.\nSetelah homebrew berhasil terpasang, perbarui aplikasi tersebut dengan perintah.\nbrew update && brew upgrade\nUntuk memasang GNU Compiler Collection (GCC) yang berisikan gfortran, gcc, dan g++, lihatlah website https://hpc.sourceforge.net/. Unduh file dengan nama yang berawalan gcc dengan menyesuaikan versi MacOS dan arsitektur Macbook Anda. Misalkan pada Mac Anda terpasang MacOS Ventura dengan arsitektur M1 (gcc-13-m1-bin.tar.gz).\n\n\n\n\nDaftar GCC pada MacOS\n\n\n\nSetelah selesai pengunduhan gcc*, ekstrak file dengan perintah berikut ini\ncd $HOME/Downloads\ngunzip gcc-13-m1-bin.tar.gz\nsudo tar -xvf $HOME/Downloads/gcc-13-m1-bin.tar -C /\nHasil ekstrak file tersebut disimpan di dalam folder /usr/local.\nAnda dapat mengecek ketiga aplikasi tersebut dengan perintah ini.\nwhich gcc gfortran g++\nJika terdapat respons seperti di bawah ini, Anda telah berhasil memasangnya.\n/usr/local/bin/gfortran\n/usr/local/bin/gcc\n/usr/local/bin/g++\n\n\n\n\nIntel\nBerbeda dengan GNU, pemasangan tipe Compiler Intel agak cukup rumit. Namun, Compiler ini sebenarnya lebih efisien dalam hal kecepatan saat mensimulasikan WRF. Kami sudah membandingkan waktu simulasi dengan Compiler tipe ini lebih cepat dibandingkan dengan GNU pada arsitektur amd64 Gambar 4. Anda dapat memperoleh software ini di halaman resmi Intel. Kami sudah menyediakan software tersebut pada tautan s.id/wrf-intel-compiler, baik yang menggunakan Linux (file berawalan l_) maupun Mac Intel (file berawalan m_). Terdapat 2 file instalasi Compiler. Letakkan 2 file ini di dalam folder WRF-Model. Perhatikan langkah-langkah berikut ini.\n# 0. Package pendukung\nsudo apt -y install make m4 csh\n# 1. oneAPI Base Toolkit Linux\nbash l_BaseKit_p_2023.1.0.46401_offline.sh -a -s --eula accept\n# 2. oneAPI HPC Toolkit Linux\nbash l_HPCKit_p_2023.1.0.46346_offline.sh -a -s --eula accept\nUntuk instalasi pada Mac Intel, Anda hanya perlu membuka file .dmg dengan melakukan proses instalasi aplikasi pada umumnya. Pemasangan compiler Intel harus sesuai urutan dengan yang pertama adalah m_BaseKit_p_2023.2.0.49398_offline.dmg dan selanjutnya adalah m_HPCKit_p_2023.2.0.49443_offline.dmg.\nLokasi folder hasil instalasi terdapat di $HOME/intel. Perintah untuk memanggil program Compiler Intel belum menjadi ENVIRONMENT VARIABLE. Untungnya, Intel menyediakan skrip untuk memanggil semua program Compiler secara default, yaitu terdapat di dalam $HOME/intel/oneapi/setvars.sh. Ketika memanggil skrip tersebut, ENVINRONMENT VARIABLE milik Miniconda secara otomatis dinonaktifkan (tulisan &lt;base&gt; hilang). Perintah untuk memanggil skrip setvars.sh adalah sebagai berikut.\nsource $HOME/intel/oneapi/setvars.sh\n\n\n\nInstalasi Package\nInstalasi beberapa package meliputi zlib, libpng, jasper, hdf5, netcdf-c, dan netcdf-fortran. Perlu diperhatikan dan lihat pada terminal bahwa Anda berada di folder ~/WRF-Model. Masukkan beberapa perintah ENVIRONMENT VARIABEL di bawah ini dengan perintah export. Anda dapat memasukkan perintah di bawah ini pada file teks dengan format .sh, misalnya environment.sh. Untuk menjalankannya, gunakan perintah source environment.sh. Pendefinisian variabel ini dapat pula dimasukkan ke file .bashrc atau .bash_profile dengan perintah nano ~/.bashrc atau nano ~/.bash_profile. Masukkan perintah di atas pada baris paling bawah dan simpan dengan menekan tombol CTRL + X dan kemudian Y dan ENTER.\nexport ODIR=$HOME/WRF-Model\nexport PATH=$ODIR/bin:$PATH\nexport LD_LIBRARY_PATH=$ODIR/lib:$LD_LIBRARY_PATH\nexport LDFLAGS=-L$ODIR/lib\nexport CPPFLAGS=-I$ODIR/include\nexport NETCDF=$ODIR\nexport HDF5=$ODIR\nexport JASPERLIB=$ODIR/lib\nexport JASPERINC=$ODIR/include\nLangkah ini wajib dilakukan pada saat melakukan instalasi package, WRF, dan WPS. Pendefinisian ENVIRONMENT VARIABLE ini berlaku untuk GNU maupun Intel.\n\nGNU\nBerikut ini langkah-langkah memasang package pada Compiler GNU. Buka terlebih dahulu folder $ODIR/LIBRARIES dengan mengetik perintah cd $ODIR/LIBRARIES. Kemudian, ikuti langkah-langkah berikut ini.\n\nzlib\n# 0. Buka folder libraries\ncd $ODIR/LIBRARIES\n# 1. Extract \ntar -xf zlib-1.3.tar.gz\n# 2. Buka folder hasil ekstrak\ncd zlib-1.3\n# 3. Konfigurasi \nCC=gcc ./configure --prefix=$ODIR\n# 4. Instalasi\nmake check install\nlibpng\n# 0. Buka folder libraries\ncd $ODIR/LIBRARIES\n# 1. Extract \ntar -xf libpng-1.6.40.tar.gz\n# 2. Buka folder hasil ekstrak\ncd libpng-1.6.40\n# 3. Konfigurasi \nCC=gcc ./configure --prefix=$ODIR\n# 4. Instalasi\nmake check install\njasper\n# 0. Buka folder libraries\ncd $ODIR/LIBRARIES\n# 1. Extract \ntar -xf jasper-1.900.1.tar.gz  \n# 2. Buka folder hasil ekstrak\ncd jasper-1.900.1\n# 3. Konfigurasi \nCC=gcc ./configure --prefix=$ODIR\n# 4. Instalasi\nmake check install\nBagi pengguna MacOS M1/M2 dengan atau tanpa terminal Docker, gunakan perintah berikut ini untuk instalasi Jasper.\n# 0. Buka folder libraries\ncd $ODIR/LIBRARIES\n# 1. Extract \ntar -xf jasper-1.900.1.tar.gz  \n# 2. Buka folder hasil ekstrak\ncd jasper-1.900.1\n# 3. Mengunduh config.guess\nwget -N -O acaux/config.guess \"http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD\"\nwget -N -O acaux/config.sub \"http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD\"\n# 4. Konfigurasi\nCC=gcc ./configure --prefix=$ODIR\n# 5. Instalasi\nmake check install\nopenMPI\nJika Anda berencana menjalankan WRF hanya dengan 1 prosesor, Anda dapat melewati langkah ini. Akan tetapi, kami menyarankan untuk memasang program ini untuk mempersingkat waktu simulasi WRF.\n# 0. Buka folder libraries\ncd $ODIR/LIBRARIES\n# 1. Extract \ntar -xf openmpi-4.1.5.tar.gz  \n# 2. Buka folder hasil ekstrak\ncd openmpi-4.1.5\n# 3. Konfigurasi \nCC=gcc FC=gfortran ./configure --prefix=$ODIR\n# 4. Instalasi\nmake && make install\nhdf5\n# 0. Buka folder libraries\ncd $ODIR/LIBRARIES\n# 1. Extract \ntar -xf hdf5-1.14.2.tar.gz \n# 2. Buka folder hasil ekstrak\ncd hdf5-1.14.2\n# 3. Konfigurasi \nCC=gcc FC=gfortran ./configure --prefix=$ODIR --enable-fortran\n# 4. Instalasi\nmake && make install\nnetcdf-c\n# 0. Buka folder libraries\ncd $ODIR/LIBRARIES\n# 1. Extract \ntar -xf netcdf-c-4.9.2.tar.gz \n# 2. Buka folder hasil ekstrak\ncd netcdf-c-4.9.2\n# 3. Konfigurasi \nCC=gcc ./configure --prefix=$ODIR --disable-dap\n# 4. Instalasi\nmake && make install\nnetcdf-fortran\n# 0. Buka folder libraries\ncd $ODIR/LIBRARIES\n# 1. Extract \ntar -xf netcdf-fortran-4.6.1.tar.gz \n# 2. Buka folder hasil ekstrak\ncd netcdf-fortran-4.6.1\n# 3. Konfigurasi \nCC=gcc FC=gfortran ./configure --prefix=$ODIR\n# 4. Instalasi\nmake && make install\n\n\n\nIntel\nBerikut ini langkah-langkah memasang package pada Compiler Intel. Buka terlebih dahulu folder pyWRF-install/libraries dengan mengetik perintah cd pyWRF-install/libraries. Untuk proses instalasi menggunakan Intel, sama saja dengan GNU. Hanya saja, perbedaannya adalah definisi dari variabel CC maupun FC. Untuk Intel, variabel CC=icc dan FC=ifort. Jangan lupa untuk mengaktifkan ENVIRONMENT VARIABLE dari Intel dengan mengetik perintah ini!\nsource ~/intel/oneapi/setvars.sh\n\nzlib\n# 0. Buka folder libraries\ncd $ODIR/LIBRARIES\n# 1. Extract \ntar -xf zlib-1.3.tar.gz\n# 2. Buka folder hasil ekstrak\ncd zlib-1.3\n# 3. Konfigurasi \nCC=icc CFLAGS='-diag-disable=10441' ./configure --prefix=$ODIR\n# 4. Instalasi\nmake check install\nlibpng\n# 0. Buka folder libraries\ncd $ODIR/LIBRARIES\n# 1. Extract \ntar -xf libpng-1.6.40.tar.gz\n# 2. Buka folder hasil ekstrak\ncd libpng-1.6.40\n# 3. Konfigurasi \nCC=icc CFLAGS='-diag-disable=10441' ./configure --prefix=$ODIR\n# 4. Instalasi\nmake check install\njasper\n# 0. Buka folder libraries\ncd $ODIR/LIBRARIES\n# 1. Extract \ntar -xf jasper-1.900.1.tar.gz  \n# 2. Buka folder hasil ekstrak\ncd jasper-1.900.1\n# 3. Konfigurasi \nCC=icc CFLAGS='-diag-disable=10441' ./configure --prefix=$ODIR\n# 4. Instalasi\nmake check install\nhdf5\n# 0. Buka folder libraries\ncd $ODIR/LIBRARIES\n# 1. Extract \ntar -xf hdf5-1.14.2.tar.gz \n# 2. Buka folder hasil ekstrak\ncd hdf5-1.14.2\n# 3. Konfigurasi \nCC=icc FC=ifort CFLAGS='-diag-disable=10441' ./configure --prefix=$ODIR --enable-fortran\n# 4. Instalasi\nmake && make install\nnetcdf-c\n# 0. Buka folder libraries\ncd $ODIR/LIBRARIES\n# 1. Extract \ntar -xf netcdf-c-4.9.2.tar.gz \n# 2. Buka folder hasil ekstrak\ncd netcdf-c-4.9.2\n# 3. Konfigurasi \nCC=icc CFLAGS='-diag-disable=10441' ./configure --prefix=$ODIR --disable-dap\n# 4. Instalasi\nmake && make install\nnetcdf-fortran\n# 0. Buka folder libraries\ncd $ODIR/LIBRARIES\n# 1. Extract \ntar -xf netcdf-fortran-4.6.1.tar.gz \n# 2. Buka folder hasil ekstrak\ncd netcdf-fortran-4.6.1\n# 3. Konfigurasi \nCC=icc FC=ifort CFLAGS='-diag-disable=10441' ./configure --prefix=$ODIR\n# 4. Instalasi\nmake && make install\n\n\n\n\nInstalasi WRF\nProses instalasi WRF membutuhkan waktu agak lama, yaitu sekitar 20-60 menit. Tentunya, ini bergantung pada spesifikasi prosesor yang Anda gunakan, serta tipe Compiler. Ikuti langkah-langkah berikut.\n\nBuka direktori WRF yang berada di dalam $ODIR/WRF dengan perintah.\ncd $ODIR/WRF\nJalankan file configure dengan perintah.\n./configure\nAnda akan disajikan beberapa teks di dalamnya. Anda diperintahkan untuk memilih opsi Compiler. Tipe Compiler tersebut selain GNU dan Intel, ada pula IBM, PGI, Fujitsu, Pathscale, dan CRAY. Jika Anda menggunakan Compiler tipe GNU, ketikkan angka 35. Untuk Intel, ketik angka 16. Setelah itu, tekan Enter.\n\n\n\nKonfigurasi WRF dengan Compiler GNU\n\n\n\n\n\nKonfigurasi WRF dengan Compiler GNU\n\n\nUntuk pengguna Mac M1/M2 tanpa Docker, Anda dapat menggunakan opsi 36.\nUntuk melakukan instalasi, ketik perintah ini.\n./compile em_real -j jumlah_prosesor\ndimana jumlah_prosesor adalah jumlah dari prosesor pada laptop/komputer Anda yang akan digunakan untuk proses instalasi dan kompilasi kode-kode WRF. Proses kompilasi akan memakan waktu yang sangat lama apabila Anda hanya menggunakan 1 prosesor. Pastikan berbagai program pada komputer/laptop Anda yang saat ini sedang dibuka, seperti Google Chrome atau Spotify harap ditutup terlebih dahulu karena ini membantu proses instalasi lebih stabil.\nUntuk Compiler Intel, setelah langkah ke-2 dijalankan, buka file configure.wrf dengan perintah.\nnano configure.wrf\nKemudian, scroll ke bawah dengan menekan tombol \\(\\downarrow\\) pada keyboard dan ubahlah isinya sesuai aturan pada tabel di bawah ini.\n\n\n\nTabel 1: Pengubahan variabel DM_FC dan DM_CC\n\n\n\n\n\nSebelum\nSesudah\n\n\n\n\nDM_FC = mpif90 -f90=$(SFC)\nDM_FC = mpiifort -f90=$(SFC)\n\n\nDM_CC = mpicc -cc=$(SCC)\nDM_CC = mpiicc -cc=$(SCC)\n\n\n\n\n\n\nSetelah selesai diubah, keluar dari editor nano dengan menekan tombol Ctrl + X\n\nProses instalasi WRF berhasil dilakukan apabila terdapat file yang berekstensi .exe: ndown.exe, tc.exe, real.exe, dan wrf.exe di dalam folder main. Anda bisa melihatnya dengan perintah\nls main/*.exe\nmain/ndown.exe  main/real.exe  main/tc.exe  main/wrf.exe\nUntuk pengguna MacOS M1/M2 dengan Docker, ikuti langkah-langkah berikut.\n\nBuka direktori WRF yang berada di dalam $ODIR/WRF.\nUbah file arch/configure.defaults menggunakan teks editor nano dengan menambahkan teks ini.\nnano arch/configure.defaults\n########################################################################################################################\n#ARCH Linux aarch64, Arm compiler OpenMPI # serial smpar dmpar dm+sm#\nDESCRIPTION     =      GCC ($SFC/$SCC): Aarch64\nDMPARALLEL      =\nOMPCPP          =      -fopenmp\nOMP             =      -fopenmp\nOMPCC           =      -fopenmp\nSFC             =      gfortran\nSCC             =      gcc\nCCOMP           =      gcc\nDM_FC           =      mpif90\nDM_CC           =      mpicc -DMPI2_SUPPORT\nFC              =      CONFIGURE_FC\nCC              =      CONFIGURE_CC\nLD              =      $(FC)\nRWORDSIZE       =      CONFIGURE_RWORDSIZE\nPROMOTION       =\nARCH_LOCAL      =\nCFLAGS_LOCAL    =      -w -O3 -c\nLDFLAGS_LOCAL   =      -fopenmp\nFCOPTIM         =      -Ofast -march=armv8.2-a+fp16+rcpc+dotprod+crypto -fopenmp -frecursive -funroll-loops\nFCREDUCEDOPT    =      $(FCOPTIM)\nFCNOOPT         =      -O0 -fopenmp -frecursive\nFCDEBUG         =      -g $(FCNOOPT)\nFORMAT_FIXED    =      -ffixed-form -ffixed-line-length-0 -Wno-invalid-pch -Wno-argument-mismatch\nFORMAT_FREE     =      -ffree-form -ffree-line-length-0 -Wno-argument-mismatch -Wno-invalid-pch\nFCSUFFIX        =\nBYTESWAPIO      =      -fconvert=big-endian -frecord-marker=4\nFCBASEOPTS      =      -w $(FORMAT_FREE) $(BYTESWAPIO)\nMODULE_SRCH_FLAG=      -I$(WRF_SRC_ROOT_DIR)/main\nTRADFLAG        =      -traditional-cpp\nCPP             =      /lib/cpp CONFIGURE_CPPFLAGS\nAR              =      ar\nARFLAGS         =      ru\nM4              =      m4 -B 14000\nRANLIB          =      ranlib\nRLFLAGS         =\nCC_TOOLS        =      $(SCC)\nJalankan program configure dengan perintah ini.\n./configure\nKemudian, pilih nomor 4 untuk memilih opsi Linux aarch64, Arm compiler OpenMPI # serial smpar dmpar dm+sm. Setelah itu, tekan Enter. Abaikan saja terhadap respons seperti pada gambar ini.\n\n\n\nRespons program configure pada MacOS M1/M2 Docker\n\n\nSelanjutnya, jalankan program compile dengan perintah ini.\n./compile em_real -j jumlah_prosesor\n\n\n\nInstalasi WRF Pre-Processing (WPS)\nProgram WPS digunakan untuk menyesuaikan data masukan dari berbagai sumber (ERA5, GFS, NAM, …) sebelum ke simulasi WRF. Terdapat 3 program utama: geogrid.exe, ungrib.exe, dan metgrid.exe.\n\ngeogrid.exe: memilih lokasi yang akan dilakukan simulasi. Luaran program ini berupa file geo_em* yang berisi nilai-nilai dari variabel di dalam file hasil ekstrak geog_high_res_mandatory.tar\nungrib.exe: mengubah file berformat grib menjadi nc, serta memungkinkan dapat melakukan interpolasi (waktu dan lokasi)\nmetgrid.exe: menggabungkan luaran dari geogrid.exe dan ungrib.exe sehingga menghasilkan file met_em* sesuai dengan ketentuan lokasi dan waktu di dalam namelist.wps\n\nProses instalasi WPS tidak membutuhkan waktu yang lama, sekitar 2-5 menit. Untuk melakukan instalasi WPS, ikuti langkah-langkah berikut ini.\n\nSaat ini, Anda berada di folder WRF. Buka folder WPS dengan perintah ini.\ncd $ODIR/WPS\nJalankan file configure dengan perintah ini.\n./configure\nKetik angka 3 untuk GNU, angka 19 untuk Intel, atau angka 19 untuk Mac M1/M2 tanpa Docker.\nSetelah selesai, di folder WPS akan muncul file configure.wps. Beberapa baris dari isi file tersebut ada yang perlu ditambahkan dan diganti dengan ketentuan ini.\n\nUntuk Intel, tambahkan flags -liomp5 setelah -lnetcdf pada bagian variabel WRF_LIB = .... Kemudian, ubah pula DM_FC dan DM_CC seperti pada Tabel 1.\nUntuk GNU serta Mac M1/M2 tanpa Docker, tambahkan flags -lgomp setelah -lnetcdf pada bagian variabel WRF_LIB = ....\n\nSetelah diganti, lakukan kompilasi dengan mengetik perintah\n./compile\n\nProses instalasi berhasil apabila terdapat 3 file .exe: geogrid.exe, ungrib.exe, dan metgrid.exe di folder WPS yang berupa shortcut. Anda dapat menggunakan perintah\nls *.exe\ngeogrid.exe  metgrid.exe  ungrib.exe\nUntuk pengguna MacOS M1/M2/M3 dengan Docker, ikuti langkah-langkah berikut.\n\nBuka direktori WPS yang berada di dalam $ODIR/WPS.\nUbah file arch/configure.defaults menggunakan teks editor nano dengan menambahkan teks ini.\nnano arch/configure.defaults\n########################################################################################################################\n#ARCH Linux aarch64, Arm compiler OpenMPI # serial smpar dmpar dm+sm#\nCOMPRESSION_LIBS    = CONFIGURE_COMP_L\nCOMPRESSION_INC     = CONFIGURE_COMP_I\nFDEFS               = CONFIGURE_FDEFS\nSFC                 = gfortran\nSCC                 = gcc\nDM_FC               = mpif90\nDM_CC               = mpicc\nFC                  = CONFIGURE_FC\nCC                  = CONFIGURE_CC\nLD                  = $(FC)\nFFLAGS              = -ffree-form -O -fconvert=big-endian -frecord-marker=4 -ffixed-line-length-0 -Wno-argument-mismatch -Wno-invalid-pch\nF77FLAGS            = -ffixed-form -O -fconvert=big-endian -frecord-marker=4 -ffree-line-length-0 -Wno-argument-mismatch -Wno-invalid-pch\nFCSUFFIX            =\nFNGFLAGS            = $(FFLAGS)\nLDFLAGS             =\nCFLAGS              =\nCPP                 = /usr/bin/cpp -P -traditional\nCPPFLAGS            = -D_UNDERSCORE -DBYTESWAP -DLINUX -DIO_NETCDF -DBIT32 -DNO_SIGNAL CONFIGURE_MPI\nRANLIB              = ranlib\nJalankan program configure dengan perintah ini. Kemudian, pilih nomor 2. Tetap abaikan respons pada tulisan ./configure: 1: file: not found\n./configure\nKemudian, ubah isi file configure.wps dengan menambahkan flags -lgomp setelah -lnetcdf pada variabel WRF_LIB = ....\nSelanjutnya, jalankan program compile dengan perintah ini.\n./compile",
    "crumbs": [
      "WRF Model",
      "Overview"
    ]
  },
  {
    "objectID": "praktikum-1.html#menjalankan-simulasi-wrf-arw",
    "href": "praktikum-1.html#menjalankan-simulasi-wrf-arw",
    "title": "Dynamical Downscaling: Model Weather Research Forecasting (WRF)",
    "section": "Menjalankan Simulasi WRF-ARW",
    "text": "Menjalankan Simulasi WRF-ARW\nAnda dapat melanjutkan ke tahapan ini apabila seluruh program telah berhasil terpasang. Bagi Anda yang belum berhasil, sabar :D dan ulangi kembali langkah-langkah di atas. Secara umum, diagram pada Gambar 9 menunjukkan proses menjalankan WRF dari tahapan memasukkan data hingga plot dan analisis akhir. Seperti yang telah dijelaskan pada subbab sebelumnya bahwa langkah awal dalam menjalankan WRF adalah menjalankan WPS terlebih dahulu. Anda perlu menyiapkan data masukan atmosfer maupun permukaan (data statik). Program geogrid.exe dijalankan pertama, kemudian diikuti dengan ungrib.exe dan terakhir metgrid.exe. Selanjutnya, Anda dapat melangkah ke program WRF, yaitu real.exe dan wrf.exe. Program real.exe digunakan sebagai pendefinisian kondisi awal dan kondisi batas berdasarkan informasi dari namelist.input yang berada dalam folder test/em_real/. Kemudian, Anda dapat menggunakan perangkat lunak apapun (mis. NCAR Command Language (NCL), GrADS, R, Python, Julia, Matlab, ArcMAP, atau QGIS) untuk menganalisis serta visualisasi luaran WRF.\nUntuk data masukan, Anda juga dapat menggunakan data observasi, tetapi harus berupa grid. Namun, ini merupakan program yang berbeda dari WRF-ARW, yaitu WRFDA (WRF Data Assimilation). Selain itu, terdapat pula data masukan dari emisi kimia, seperti emisi biogenik dan atropogenik. Akan tetapi, program ini merupakan turunan WRF-ARW, yaitu WRF-Chem. Penjelasan mengenai WRFDA dan WRF-Chem tidak disampaikan di dalam praktikum ini.\n\n\n\n\n\n\nGambar 9: Diagram WRF\n\n\n\nJika Anda menutup terminal bash atau mematikan laptop/komputer, definisikan kembali ENVIRONMENT VARIABLE seperti pada saat proses memasang WRF dan WPS. Variabel yang perlu didefinisikan hanya 3 saja seperti pada perintah di bawah ini. Anda dapat memasukkan variabel ini pada file .bashrc atau .bash_profile di direktori $HOME.\nexport ODIR=$HOME/WRF-Model\nexport PATH=$ODIR/bin:$PATH\nexport LD_LIBRARY_PATH=$ODIR/lib:$LD_LIBRARY_PATH\nBagi pengguna Compiler Intel, Anda perlu menambahkan perintah di bawah ini. Perintah ini diperlukan pada saat menjalankan WRF.\nulimit -s unlimited\n\nProgram WPS\nUntuk lebih mudah dalam memahami alur proses simulasi WRF pada modul ini, lokasi/domain yang dipilih untuk adalah Kota Surabaya dengan periode 1-3 Januari 2022 dengan data GFS dan ERA5. Interval waktu dari kedua data tersebut adalah 6 jam, yaitu pukul 00:00, 06:00, 12:00, dan 18:00 waktu Zulu (UTC+0). Langkah awal sebelum menjalankan WRF adalah menentukan lokasi dan waktu terlebih dahulu di dalam program WPS. Seperti yang telah dijelaskan sebelumnya, WPS memiliki 3 program utama: geogrid.exe, ungrib.exe, dan metgrid.exe.\nSesuai dengan kelanjutan dari subbab sebelumnya mengenai instalasi WRF, Anda saat ini berada di dalam folder WPS/. Jika lupa, Anda bisa mengetikkan kembali perintah ini.\ncd $ODIR/WPS\nLangkah-langkah menjalankan program WPS adalah sebagai berikut.\n\nPenentuan Lokasi dan Waktu Simulasi\nIsi dari file namelist.wps pada saat awal instalasi seperti ini.\n&share\n wrf_core = 'ARW',\n max_dom = 2,\n start_date = '2019-09-04_12:00:00','2019-09-04_12:00:00',\n end_date   = '2019-09-06_00:00:00','2019-09-04_12:00:00',\n interval_seconds = 10800\n/\n\n&geogrid\n parent_id         =   1,    1,\n parent_grid_ratio =   1,    3,\n i_parent_start    =   1,   53,\n j_parent_start    =   1,   25,\n e_we              =  150, 220,\n e_sn              =  130, 214,\n geog_data_res = 'default','default',\n dx = 15000,\n dy = 15000,\n map_proj = 'lambert',\n ref_lat   =  33.00,\n ref_lon   = -79.00,\n truelat1  =  30.0,\n truelat2  =  60.0,\n stand_lon = -79.0,\n geog_data_path = '/glade/work/wrfhelp/WPS_GEOG/'\n/\n\n&ungrib\n out_format = 'WPS',\n prefix = 'FILE',\n/\n\n&metgrid\n fg_name = 'FILE'\n/\nTerdapat berbagai macam parameter di dalam &share, &geogrid, &ungrib, dan &metgrid. Anda perlu mengubah beberapa parameter tersebut yang dapat disesuaikan dengan simulasi. Tapi, Anda harus memperhatikan aturan atau template yang telah diberikan di dalam panduan pengguna. Untuk lebih rincinya, Anda bisa lihat di Panduan Pengguna WRF-ARW Bab 3. Di dalam tahapan ini, Anda perlu mengubah parameter-parameter yang ada di dalam &geogrid. Pada contoh yang telah kami berikan, Anda perlu mengganti parameter pada bagian &share dan &geogrid di dalam file namelist.wps. Anda dapat menggunakan teks editor nano.\nnano namelist.wps\nFile yang telah berubah menjadi seperti di bawah ini.\n&share\n wrf_core = 'ARW',                                                                 \n max_dom = 3,\n start_year  = 2022, 2022, 2022,\n start_month =   01,   01,   01,\n start_day   =   01,   01,   01,\n start_hour  =   00,   00,   00,\n end_year    = 2022, 2022, 2022,\n end_month   =   01,   01,   01,\n end_day     =   03,   03,   03,\n end_hour    =   18,   18,   18,\n interval_seconds = 21600,                                                         \n io_form_geogrid = 2,                                                              \n/\n\n&geogrid\n parent_id         =   1,   1,   1,\n parent_grid_ratio =   1,   3,   9,                                                  \n i_parent_start    =   1,  11,  15,\n j_parent_start    =   1,  11,  15,\n e_we              =  33,  40,  46,                                                 \n e_sn              =  33,  40,  46,                                                 \n geog_data_res = 'default','default','default',                                     \n dx = 18000,                                                                        \n dy = 18000,                                                                        \n map_proj = 'mercator',                                                             \n ref_lat   =  -7.328,                                                   \n ref_lon   = 112.741,                                                     \n truelat1  =  -7.328,                                                   \n geog_data_path = '/home/absen/WRF-Model/data/WPS_GEOG/'                                 \n/\n\n&ungrib\n out_format = 'WPS',\n prefix = 'FILE',\n/\n\n&metgrid\n fg_name = 'FILE'\n io_form_metgrid = 2, \n/\nPenjelasan setiap variabel dapat dilihat pada Tabel 2.\n\n\n\nTabel 2: Informasi beberapa variabel di dalam namelist.wps\n\n\n\n\n\n\n\n\n\nVariabel\nKeterangan\n\n\n\n\nwrf_core\nTipe penyelesaian WRF, ARW atau NMM\n\n\nmax_dom\nJumlah domain, semakin banyak domain maka semakin tinggi resolusi spasialnya\n\n\nstart_date\nWaktu mulai simulasi sesuai dengan data masukan. Format: YYYY-MM-DD_HH:mm:ss\n\n\nend_date\nWaktu akhir simulasi sesuai dengan data masukan. Format: YYYY-MM-DD_HH:mm:ss\n\n\ninterval_seconds\nInterval waktu dari data masukan (dalam detik)\n\n\nio_from_geogrid\nTipe format file luaran geogrid.exe (1 = binary, 2 = netcdf, 3 = GRIB1)\n\n\nparent_id\nUntuk domain paling kasar, nilainya 1. Domain selanjutnya juga bernilai 1 yang menandakan bahwa subdomain merupakan bagian dari domain utamanya\n\n\nparent_grid_ratio\nRasio piksel dari dx dan dy pada domain ke-1. Domain paling kasar adalah 1 dan selanjutnya mengikuti rasio yang diinginkan.\n\n\ni_parent_start\nNomor indeks acuan untuk koordinat X. Domain paling kasar bernilai 1, ditentukan dari kiri-bawah\n\n\nj_parent_start\nNomor indeks acuan untuk koordinat Y. Domain paling kasar bernilai 1, ditentukan dari kiri-bawah\n\n\ne_we\nJumlah grid/piksel dari barat ke timur mengikuti rumus parent_grid_ratio * N + 1, dengan \\(N &gt; 0\\)\n\n\ne_sn\nJumlah grid/piksel dari selatan ke utara mengikuti rumus parent_grid_ratio * N + 1, dengan \\(N &gt; 0\\)\n\n\ngeog_data_res\nPemilihan resolusi spasial dari data statik\n\n\ndx\nResolusi spasial pada koordinat X (dalam meter)\n\n\ndy\nResolusi spasial pada koordinat Y (dalam meter)\n\n\nmap_proj\nSistem proyeksi peta (mercator, lambert, polar, lat-lon). Untuk simulasi di sekitar khatulistiwa, direkomendasikan menggunakan mercator\n\n\nref_lat\nKoordinat lintang titik tengah acuan dari domain paling kasar\n\n\nref_lon\nKoordinat bujur titik tengah acuan dari domain paling kasar\n\n\ntruelat1\nKoordinat lintang sebenarnya. Dibutuhkan untuk sistem proyeksi mercator, polar, dan lambert\n\n\ngeog_data_path\nLokasi folder WPS_GEOG\n\n\n\n\n\n\nPada parameter start_date dan end_date, Anda bisa menggunakan parameter lain dengan membagi masing-masing format tahun (start_year; end_year), bulan (start_month; end_month), tanggal (start_day; end_day), dan jam (start_hour; end_hour).\nBerkaitan dengan skala resolusi spasial pada simulasi yang akan dijalankan dengan pemilihan lokasi di Kota Surabaya, skala tertingginya adalah 2 km. Anda perhatikan parameter parent_grid_ratio. Nilai 1, 3, dan 9 secara berturut-turut merupakan rasio terhadap dx atau dy untuk setiap domain. Nilai 1 berarti untuk domain terluar dengan skala \\(1 / 1 * 18000 = 18000\\) meter, sedangkan nilai 3 untuk domain ke-2 dengan skala \\(1 / 3 * 18000 = 6000\\) meter.\nPada bagian &geogrid, penentuan lokasi kajian ini cukup rumit. Anda bisa menggunakan halaman Github https://jiririchter.github.io/WRFDomainWizard untuk membuat file namelist.wps sesuai dengan lokasi yang Anda inginkan, setidaknya Anda dapat menyalin teks pada bagian &geogrid Gambar 10.\n\n\n\n\n\n\nGambar 10: WRF Domain Wizard oleh Jiririchter\n\n\n\nUntuk memverifikasi kesesuaian pemilihan lokasi yang telah dibuat, Anda dapat menggunakan skrip plotgrids_new.ncl di dalam folder util/. Bukalah file tersebut. Cari dan ubahlah variabel type = x11 menjadi type = png untuk mengatur luaran file dalam bentuk gambar (format .png). Untuk menjalankan skrip ini, aktifkan terlebih dahulu environment ncl dengan perintah source activate ncl atau conda activate ncl. Kemudian, jalankan perintah berikut ini. File .png akan muncul di dalam folder WPS/ dengan nama wps_show_dom.png. Hasilnya seperti Gambar 11\ncd $HOME/WRF-Model/WPS\nncl util/plotgrids_new.ncl\n\n\n\n\n\n\nGambar 11: Konfigurasi domain WRF\n\n\n\n\n\nMenjalankan Program geogrid.exe\nSelanjutnya, Anda dapat menjalankan program geogrid.exe dengan perintah di bawah ini. Hasilnya, terdapat 3 file dengan nama geo_em.d0x.nc (dengan x = nomor domain; 1, 2, 3) karena pengaturan max_dom = 3.\n./geogrid.exe\nls geo_em*\ngeo_em.d01.nc  geo_em.d02.nc  geo_em.d03.nc\n\n\nMenyambungkan File Data Masukan dan Tabel Variabel\nWPS menyediakan program link_grib.csh untuk menyambungkan file data masukan ke dalam folder WPS/ dengan membuat shortcut yang bernama GRIBFILE.* (GRIBFILE.AAA, GRIBFILE.AAB, …). Perintahnya sebagai berikut.\n./link_grib.csh $ODIR/data/GFS/*\nKemudian, buatlah shortcut dengan nama Vtable di dalam folder WPS/ dari file yang berada di dalam folder ungrib/Variable_Tables. Untuk data GFS, nama file tersebut adalah Vtable.GFS, sedangkan ERA5 adalah Vtable.ERA-Interim.pl. Perintahnya sebagai berikut.\nln -sf ungrib/Variable_Tables/Vtable.GFS Vtable # GFS\nln -sf ungrib/Variable_Tables/Vtable.ERA-Interim.pl Vtable # ERA5\n\n\nMenjalankan Program ungrib.exe\nSetelah menyambungkan data masukan serta tabel variabel, jalankan program ungrib.exe dengan perintah berikut.\n./ungrib.exe\nLuaran dari program ini adalah file dengan nama FILE:* yang memiliki format .nc (netcdf).\n\n\nMenjalankan Program metgrid.exe\nJalankan program metgrid.exe dengan perintah berikut.\n./metgrid.exe\nLuaran dari program ini adalah file dengan nama met_em* yang memiliki format .nc. File-file ini nanti yang akan dipindahkan menuju folder WRF/test/em_real atau Anda dapat juga membuat shortcut. Perintahnya sebagai berikut.\nmv met_em* $ODIR/WRF/test/em_real # memindahkan semua file met_em* ke folder WRF/test/em_real\n# atau\nln -sf met_em* $ODIR/WRF/test/em_real # membuat shortcut di folder WRF/test/em_real\n\n\n\nProgram WRF\nPada bagian ini, program WRF yang digunakan hanya 2: real.exe dan wrf.exe. Sebelum itu, Anda diharuskan mengubah beberapa parameter pada file namelist.input seperti di dalam file namelist.wps. Parameter di dalam namelist.input sangat banyak karena terdapat bagian pemilihan lokasi dan waktu (disesuaikan dengan namelist.wps), pemilihan skema parameter fisik, dan parameter dinamik. Kami hanya memberikan beberapa parameter yang diperlukan untuk contoh simulasi. Anda dapat membaca lebih lanjut di Panduan Pengguna WRF Bab 5.\n\nMengubah isi namelist.input\nSaat ini Anda masih berada di folder WPS/. Buka terlebih dahulu folder em_real dengan perintah\ncd $ODIR/WRF/test/em_real\nDi dalam folder em_real, terdapat 4 program, yaitu real.exe, ndown.exe, tc.exe, dan wrf.exe. Nilai max_dom pada namelist.wps adalah 3. Jika pemilihan lokasi Anda memiliki &gt;1 domain, WRF akan memproses simulasi sampai pada domain tertinggi atau disebut dengan metode nesting. Proses ini juga dibagi lagi menjadi 2, yaitu nesting dua arah dan satu arah. Untuk nesting satu arah, program yang digunakan bisa atau tanpa dengan program ndown.exe. Penggunaan nesting satu arah biasanya pengguna hanya tertarik pada analisis domain tertinggi. Penggunaan ndown.exe juga sering digunakan pada turunan WRF, yaitu WRF-Chem. Untuk nesting dua arah, proses-proses perhitungan fisis pada domain tertinggi dikembalikan (feedback) ke domain terendah sehingga proses analisis dapat dilakukan pada semua domain. Anda dapat membaca lebih lanjut mengenai nesting di https://ruc.noaa.gov/wrf/wrf-chem/wrf_tutorial_2012_brazil/WRF_nesting.pdf.\nBukalah file namelist.input dengan cara sama seperti Anda membuka namelist.wps. Ketika pertama kali dibuka, file namelist.input seperti di bawah ini. Anda juga dapat melihat beberapa contoh/template lain (mis. namelist.input.4km, namelist.input.chem, namelist.input.volc, …) sesuai dengan kebutuhan tertentu.\n &time_control\n run_days                            = 0,\n run_hours                           = 36,\n run_minutes                         = 0,\n run_seconds                         = 0,\n start_year                          = 2019, 2019,\n start_month                         = 09,   09, \n start_day                           = 04,   04,\n start_hour                          = 12,   12,\n end_year                            = 2019, 2019,\n end_month                           = 09,   09,\n end_day                             = 06,   06,\n end_hour                            = 00,   00,\n interval_seconds                    = 10800\n input_from_file                     = .true.,.true.,\n history_interval                    = 60,  60,\n frames_per_outfile                  = 1, 1,\n restart                             = .false.,\n restart_interval                    = 7200,\n io_form_history                     = 2\n io_form_restart                     = 2\n io_form_input                       = 2\n io_form_boundary                    = 2\n /\n\n &domains\n time_step                           = 90,\n time_step_fract_num                 = 0,\n time_step_fract_den                 = 1,\n max_dom                             = 2,\n e_we                                = 150,    220,\n e_sn                                = 130,    214,\n e_vert                              = 45,     45,\n dzstretch_s                         = 1.1\n p_top_requested                     = 5000,\n num_metgrid_levels                  = 34,\n num_metgrid_soil_levels             = 4,\n dx                                  = 15000,\n dy                                  = 15000,\n grid_id                             = 1,     2,\n parent_id                           = 0,     1,\n i_parent_start                      = 1,     53,\n j_parent_start                      = 1,     25,\n parent_grid_ratio                   = 1,     3,\n parent_time_step_ratio              = 1,     3,\n feedback                            = 1,\n smooth_option                       = 0\n /\n\n &physics\n physics_suite                       = 'CONUS'\n mp_physics                          = -1,    -1,\n cu_physics                          = -1,    -1,\n ra_lw_physics                       = -1,    -1,\n ra_sw_physics                       = -1,    -1,\n bl_pbl_physics                      = -1,    -1,\n sf_sfclay_physics                   = -1,    -1,\n sf_surface_physics                  = -1,    -1,\n radt                                = 15,    15,\n bldt                                = 0,     0,\n cudt                                = 0,     0,\n icloud                              = 1,\n num_land_cat                        = 21,\n sf_urban_physics                    = 0,     0,\n fractional_seaice                   = 1,\n /\n\n &fdda\n /\n\n &dynamics\n hybrid_opt                          = 2, \n w_damping                           = 0,\n diff_opt                            = 2,      2,\n km_opt                              = 4,      4,\n diff_6th_opt                        = 0,      0,\n diff_6th_factor                     = 0.12,   0.12,\n base_temp                           = 290.\n damp_opt                            = 3,\n zdamp                               = 5000.,  5000.,\n dampcoef                            = 0.2,    0.2,\n khdif                               = 0,      0,\n kvdif                               = 0,      0,\n non_hydrostatic                     = .true., .true.,\n moist_adv_opt                       = 1,      1,\n scalar_adv_opt                      = 1,      1,\n gwd_opt                             = 1,      0,\n /\n\n &bdy_control\n spec_bdy_width                      = 5,\n specified                           = .true.\n /\n\n &grib2\n /\n\n &namelist_quilt\n nio_tasks_per_group = 0,\n nio_groups = 1,\n /\nPada file ini, samakan beberapa parameter seperti di file namelist.wps. Perhatikan Tabel 3. Anda cukup mencari parameter yang sama antara namelist.wps dengan namelist.input, tetapi tidak semuanya ada di dalam namelist.input. Untuk parameter lainnya, seperti parent_time_step_ratio, time_step, history_interval, frame_per_outfile, dan seterusnya, Anda dapat membacanya lebih banyak di Panduan Pengguna WRF Bab 5 atau bisa dilihat pada file README.namelist di dalam folder test/em_real untuk setiap penjelasan singkat berbagai parameter.\nBagian &time_control berfungsi sebagai pengaturan waktu simulasi serta luaran yang akan dihasilkan. Sebagai informasi, file luaran WRF berformat NetCDF (.nc) dengan nama wrfout_&lt;domain&gt;_&lt;yyyy&gt;-&lt;mm&gt;-&lt;dd&gt;_&lt;HH&gt;:&lt;MM&gt;:&lt;SS&gt;, dimana\n\ndomain: identitas domain (d01, d02, …)\nyyyy: tahun, dengan format 4 digit\nmm: bulan, dengan format 2 digit\ndd: tanggal, dengan format 2 digit\nHH: jam, dengan format 2 digit\nMM: menit, dengan format 2 digit\nSS: detik, dengan format 2 digit\n\nPada parameter run_days, run_hours, run_minutes, dan run_seconds, ini dapat dihitung dari selisih waktu akhir simulasi dengan awal simulasi. Pada simulasi yang akan dicoba dalam modul ini, yaitu 1 Januari 2022 pukul 00:00 UTC hingga 3 Januari 2022 18:00 UTC, nilai dari run_days dan run_hours secara berturut-turut adalah 2 dan 18. Anda juga dapat mengatur run_days ini menjadi 0 setelah dikonversi menjadi jam (2 hari = 48 jam) dan tambahkan ke run_hours, yaitu menjadi 66. Parameter history_interval digunakan untuk meletakkan nilai pada file luaran WRF dalam format .nc dengan waktu tertentu (dalam menit). Misalkan diatur ke 60, berarti hasil perhitungan dari berbagai algoritma WRF dimasukkan ke file setiap 60 menit sekali. Anda bebas mengatur angka pada parameter ini. Dampaknya, ukuran file akan semakin besar jika Anda mengatur nilainya menjadi kecil. Tentu ini tidak akan menjadi masalah apabila ruang kosong penyimpanan internal/eksternal Anda masih tersedia. Banyaknya file luaran dapat pula diatur jumlahnya, yaitu di dalam parameter frames_per_outfile. Jika parameter diatur pada frames_per_outfile = 1, history_interval = 60, dan run_hours = 66, berarti file luaran yang akan dibuat dan disimpan ke dalam penyimpanan adalah sebanyak 66 file. Agar lebih efektif saat akan melakukan analisis, kami menyarankan untuk mengatur frames_per_outfile = 1000.\nKemudian untuk bagian &domains, digunakan untuk mengatur kondisi dari domain agar dapat sesuai dengan data masukan (banyak grid horizontal dan vertikal, posisi, rasio grid, tipe interpolasi). Pada parameter feedback, Anda dapat mengatur tipe nesting dua arah (1) atau satu arah (0). Parameter num_metgrid_levels dan num_metgrid_soil_levels harus diatur sesuai dengan yang ada di dalam salah satu file met_em*. Untuk melihatnya, gunakan perintah di bawah ini. Nilai kedua parameter num_metgrid_levels dapat berbeda sesuai dengan data masukan yang digunakan. Sebagai contoh, GFS memiliki num_metgrid_levels = 34, sedangkan ERA5 num_metgrid_levels = 38.\nncdump -h met_em.d01.2022-01-01_00:00:00.nc | grep num_metgrid_levels      # = 34\nncdump -h met_em.d01.2022-01-01_00:00:00.nc | grep NUM_METGRID_SOIL_LEVELS # = 4\nDi dalam bagian &physics, terdapat berbagai skema parameterisasi dalam penyelesaian perhitungan pembentukan awan, skemar radiasi, lapisan perbatas, serta proses-proses di permukaan tanah. Pada parameter physics_suite, Anda bisa mengaturnya ke TROPICAL karena wilayah yang ingin disimulasikan berada di daerah tropis. Hanya saja, opsi default untuk skema parameterisasi belum tentu menghasilkan luaran yang bagus sesuai dengan kondisi sebenarnya di daerah tropis. Anda perlu mengkaji dari beberapa publikasi nasional maupun internasional dalam memilih skema parameterisasi, khususnya di wilayah Indonesia. Ketika Anda mendefinisikan physics_suite = 'TROPICAL', Anda tidak perlu lagi menambahkan angka pada parameter di bawah ini.\n\nmp_physics         =  6: WSM6\ncu_physics         = 16: New-Tiedke\nra_lw_physics      =  4: Rapid Radiative Model Transformation for GCM (RRTMG)\nra_sw_physics      =  4: Rapid Radiative Model Transformation for GCM (RRTMG)\nbl_pbl_physics     =  1: Yonsei University\nsf_sfclay_physics  = 91: MM5 Monin-Obukhov\nsf_surface_physics =  2: Noah Land Surface Model\n\nAnda hanya perlu menambahkan nilai -1 pada parameter-parameter tersebut, tentu saja sesuai dengan banyaknya domain. Anda juga dapat menghilangkan parameter physics_suite dan mengganti parameter mp_physics, cu_physics, sf_surface_physics, sf_sfclay_physics, ra_lw_physics, ra_sw_physics, dan bl_pbl_physics ke opsi lain yang ada di dalam Panduan Pengguna WRF Bab 5. Anda harus berhati-hati dan memperhatikan pemilihan skema parameterisasi karena terdapat parameter yang harus ditambahkan di dalam bagian &physics, menambahkan bagian lain, atau kombinasi antar skema. Sebagai contoh untuk sf_surface_physics = 4 (Noah-MP Land Surface Model), perlu menambahkan bagian &noah_mp; Ketika cu_physics = 14 (Scale-aware SAS), perlu menambahkan parameter shcu_physics = 4; Parameter bl_pbl_physics = 2 (Mellor-Yamada-Janjic, MYJ) nilai dari parameter sf_sfclay_physics = 2 (Eta Model). Untuk pengaturan nilai-nilai di dalam &physics, Anda harus menambahkannya sebanyak jumlah domain. Anda juga dapat menonaktifkan skema parameterisasi tertentu dengan mengubahnya ke 0, misalnya pada cu_physics untuk domain dengan resolusi &lt;10 km, yaitu pada domain 2 dan 3.\n\n\n\nTabel 3: Informasi sebagian variabel di dalam namelist.input yang perlu disesuaikan dengan namelist.wps\n\n\n\n\n\n\n\n\n\nParameter di namelist.wps\nParameter di namelist.input\n\n\n\n\nstart_year = 2022, 2022, 2022,\nstart_year = 2022, 2022, 2022,\n\n\nstart_month = 01, 01, 01,\nstart_month = 01, 01, 01,\n\n\nstart_day = 01, 01, 01,\nstart_day = 01, 01, 01,\n\n\nstart_hour = 00, 00, 00,\nstart_hour = 00, 00, 00,\n\n\nend_year = 2022, 2022, 2022,\nend_year = 2022, 2022, 2022,\n\n\nend_month = 01, 01, 01,\nend_month = 01, 01, 01,\n\n\nend_day = 03, 03, 03,\nend_day = 03, 03, 03,\n\n\nend_hour = 18, 18, 18,\nend_hour = 18, 18, 18,\n\n\n-\nrun_days = 2,\n\n\n-\nrun_hour = 18,\n\n\nmax_dom = 3,\nmax_dom = 3,\n\n\ninterval_seconds = 21600,\ninterval_seconds = 21600,\n\n\nparent_id = 1, 1, 1,\nparent_id = 1, 1, 1,\n\n\nparent_grid_ratio =   1,   3,   9,\nparent_grid_ratio =   1,   3,   9,\n\n\ndx = 15000,\ndx = 15000,\n\n\ndy = 15000,\ndy = 15000,\n\n\ni_parent_start = 1,  11,  15,\ni_parent_start = 1,  11,  15,\n\n\nj_parent_start = 1,  11,  15,\nj_parent_start = 1,  11,  15,\n\n\ne_we =  33,  40,  46,\ne_we =  33,  40,  46,\n\n\ne_sn =  33,  40,  46,\ne_sn =  33,  40,  46,\n\n\n-\nparent_time_step_ratio = 1,   3,   9, (sama dengan parent_grid_ratio)\n\n\n-\ntime_step = 90, dengan rumus \\(6 * dx\\) (dalam km)\n\n\n\n\n\n\nIsi file namelist.input yang telah diubah sepenuhnya menjadi seperti ini.\n&time_control\n run_days                            = 2,\n run_hours                           = 18,\n run_minutes                         = 0,\n run_seconds                         = 0,\n start_year                          = 2022, 2022, 2022,\n start_month                         = 01,   01,  01,\n start_day                           = 01,   01,  01,\n start_hour                          = 00,   00,  00,\n end_year                            = 2022, 2022, 2022,\n end_month                           = 01,   01,  01, \n end_day                             = 03,   03,  03,\n end_hour                            = 18,   18,  18,\n interval_seconds                    = 21600,\n input_from_file                     = .true.,.true.,.true.,\n history_interval                    = 60,  60, 60,\n frames_per_outfile                  = 1000, 1000, 1000,\n restart                             = .false.,\n restart_interval                    = 7200,\n io_form_history                     = 2\n io_form_restart                     = 2\n io_form_input                       = 2\n io_form_boundary                    = 2\n /\n\n &domains\n time_step                           = 90,\n time_step_fract_num                 = 0,\n time_step_fract_den                 = 1,\n max_dom                             = 3,\n e_we                                = 33,    40,  46,\n e_sn                                = 33,    40,  46,\n e_vert                              = 44,    44,  44,\n dzstretch_s                         = 1.1\n p_top_requested                     = 5000,\n use_surface                         = .false.,\n sfcp_to_sfcp                        = .true.,\n num_metgrid_levels                  = 34,                ! 34 = GFS, 38 = ERA5\n num_metgrid_soil_levels             = 4,\n dx                                  = 18000,\n dy                                  = 18000,\n grid_id                             = 1,     2,   3,\n parent_id                           = 1,     1,   1,\n i_parent_start                      = 1,     11, 15,\n j_parent_start                      = 1,     11, 15,\n parent_grid_ratio                   = 1,     3,   9,\n parent_time_step_ratio              = 1,     3,   9,\n feedback                            = 1,\n smooth_option                       = 0\n /\n\n &physics\n physics_suite                       = 'TROPICAL'\n mp_physics                          = -1,    -1,  -1,\n cu_physics                          = -1,     0,   0,\n ra_lw_physics                       = -1,    -1,  -1,\n ra_sw_physics                       = -1,    -1,  -1,\n bl_pbl_physics                      = -1,    -1,  -1,\n sf_sfclay_physics                   = -1,    -1,  -1,\n sf_surface_physics                  = -1,    -1,  -1,\n radt                                = 18,    18,  18,\n bldt                                = 0,     0,   0,\n cudt                                = 0,     0,   0,\n icloud                              = 1,\n num_land_cat                        = 21,\n sf_urban_physics                    = 0,     0,   0,\n fractional_seaice                   = 1,\n /\n\n &fdda\n /\n\n &dynamics\n hybrid_opt                          = 2, \n w_damping                           = 0,\n diff_opt                            = 2,      2,   2,\n km_opt                              = 4,      4,   4,\n diff_6th_opt                        = 0,      0,   0,\n diff_6th_factor                     = 0.12,   0.12, 0.12,\n base_temp                           = 290.\n damp_opt                            = 3,\n zdamp                               = 5000.,  5000., 5000.,\n dampcoef                            = 0.2,    0.2,     0.2,\n khdif                               = 0,      0,    0,\n kvdif                               = 0,      0,    0,\n non_hydrostatic                     = .true., .true., .true.,\n moist_adv_opt                       = 1,      1,    1,\n scalar_adv_opt                      = 1,      1,    1,\n gwd_opt                             = 1,      0,    0,\n /\n\n &bdy_control\n spec_bdy_width                      = 5,\n specified                           = .true.\n /\n\n &grib2\n /\n\n &namelist_quilt\n nio_tasks_per_group = 0,\n nio_groups = 1,\n /\n\n\nMenjalankan program real.exe dan wrf.exe\nProgram real.exe mengeluarkan file-file dalam format .nc, yaitu wrfbdy_d01 dan wrfinput_&lt;domain&gt;. Perintah menjalankan program ini adalah sebagai berikut.\n./real.exe\nUntuk melihat respon dari program ini, Anda dapat melihat file rsl.errror.0000 dengan perintah\ntail rsl.error.0000 -n 1\nJika respon yang diberikan terdapat kalimat real_em: SUCCESS COMPLETE REAL_EM INIT, Anda bisa melanjutkan ke tahapan wrf.exe.\n./wrf.exe\nSimulasi WRF dari program wrf.exe telah berhasil selesai apabila terdapat kalimat wrf: SUCCESS COMPLETE WRF pada baris terakhir rsl.error.0000 dan terdapat file wrfout_d0*. Untuk simulasi ini, terdapat 3 file wrfout_d0*: wrfout_d01_2022-01-01_00:00:00, wrfout_d02_2022-01-01_00:00:00, dan wrfout_d03_2022-01-01_00:00:00. Sejatinya, file-file tersebut berformat *.nc walaupun tidak tertera pada nama file. File wrfout_d0* memiliki interval waktu per 1 jam, dari pukul 00:00 UTC 1 Januari - 18:00 UTC 3 Januari 2022. Langkah selanjutnya, Anda dapat menganalisis luaran WRF dengan aplikasi apapun yang Anda bisa, selama mendukung format *.nc. Hanya saja, Anda perlu mengubah bentuk dan nama variabel WRF untuk disesuaikan dengan CF-Convention dengan program NCL yang telah disediakan di https://sundowner.colorado.edu/wrfout_to_cf/wrfout_to_cf.ncl.\nPengguna Docker di MacOS M1/M2 dapat menyalin file wrfout_* ke direktori lokal dengan perintah sebagai berikut.\ndocker cp &lt;nama-container&gt;:$HOME/WRF-Model/WRF/test/em_real/wrfout_* .",
    "crumbs": [
      "WRF Model",
      "Overview"
    ]
  },
  {
    "objectID": "praktikum-1.html#visualisasi-luaran-wrf",
    "href": "praktikum-1.html#visualisasi-luaran-wrf",
    "title": "Dynamical Downscaling: Model Weather Research Forecasting (WRF)",
    "section": "Visualisasi Luaran WRF",
    "text": "Visualisasi Luaran WRF\nTerdapat 3 file luaran WRF yang telah Anda jalankan dengan masing-masing memiliki resolusi spasial yang berbeda, yaitu 18 km, 6 km, dan 2 km dengan pemilihan lokasi titik tengah longitude dan latitude di Kota Surabaya. Selanjutnya, Anda dapat melihat hasil dari simulasi tersebut dengan berbagai macam perangkat lunak. Pada modul ini, kami menampilkan hasil simulasi dengan menggunakan aplikasi NCL, QGIS, Python, R, dan Julia.\n\nPython\nUntuk mengetikkan kode Python. Anda dapat menggunakan kode editor Jupyter Notebook atau aplikasi lainnya, seperti Visual Studio Code, Notepad++, atau Atom. Untuk langkah-langkah di bawah ini, kami lebih menjelaskan cara penulisan kode Python pada Jupyter Notebook. Kode editor ini dapat digunakan pada aplikasi Browser default Anda, misalnya Google Chrome, Safari, atau Microsoft Edge. Kami menyarankan Anda untuk menggunakan Jupyter Notebook agar hasil kode langsung bisa ditampilkan sehingga respons dari setiap sel dapat diketahui/dicetak secara langsung. Ikuti langkah-langkah berikut ini untuk membuka Jupyter Notebook.\n\nBukalah terminal Bash Anda. Saat ini, Anda berada di direktori $HOME atau ~.\nBukalah direktori WRF-Model dengan mengetik perintah\ncd $HOME/WRF-Model\nAktifkan terlebih dahulu Environment ncl dengan perintah conda activate ncl.\nKetikkan perintah berikut ini untuk memulai pengetikan kode Python. Browser default Anda akan terbuka dengan menampilkan kode editor Jupyter Notebook Gambar 12\njupyter notebook\n\n\n\n\n\n\n\nGambar 12: Tampilan Jupyter Notebook\n\n\n\n\nKlik New dan pilih Python 3 (ipykernel). Tampilan awal Jupyter Notebook seperti pada Gambar 13\n\n\n\n\n\n\n\nGambar 13: Tampilan awal Jupyter Notebook\n\n\n\n\nAnda dapat langsung mendapatkan hasil dari kode yang ditulis pada sel (lihat In [1]) (Gambar 14)\n\n\n\n\n\n\n\nGambar 14: Tampilan interaktif Jupyter Notebook\n\n\n\nUntuk pengolahan data WRF di Python, kami menggunakan wrf-python (Ladwig 2017). Paket ini dikembangkan oleh NCAR yang dikhususkan untuk Post-Processing luaran WRF, mendukung pembacaan file, perhitungan interpolasi, serta visualisasi WRF. Perhatikan langkah-langkah berikut cara penggunaannya mulai dari pembacaan file hingga pembuatan grafik.\n\nImpor paket\n\nfrom netCDF4 import Dataset\nimport wrf\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cartopy.crs as crs\n\nBuka salah satu file wrfout_d0*, misalnya wrfout_d03_2022-01-01_00:00:00 dan cetak variabel tersebut, misalkan variabel T2 (Air Temperature at 2m: suhu udara 2 meter dari permukaan tanah). Isinya adalah beberapa metadata. Anda dapat mengetahui variabel-variabel di dalamnya dengan menambahkan metode .variables. Anda dapat melihat penjelasan variabel-variabel pada panduan pengguna WRF-ARW.\n# Lokasi folder luaran WRF\nwrf_path = '/home/absen/WRF-Model/WRF/test/em_real'\n# Membuka file wrfout\nwrf_d03 = Dataset(f\"{wrf_path}/wrfout_d03_2022-01-01_00:00:00\")\n# Melihat variabel\nwrf_d03.variables\nAnda dapat mengambil variabel dengan fungsi wrf.getvar() dengan menyertakan argumen dari nama variabel WRF. Untuk mengambil T2, gunakan perintah di bawah ini. Perhatikan hasil yang diperoleh merupakan tipe xarray.DataArray dan metode wrf.ALL_TIMES pada argumen timeidx berguna untuk mengambil seluruh waktu, mulai dari awal hingga akhir simulasi. Anda dapat mengambil salah satu waktu dengan mencantumkan angka bulat (mis. 0, 1, 2, …).\nwrf_t2 = wrf.getvar(wrf_d03, \"T2\", timeidx=wrf.ALL_TIMES)\nUntuk mendapatkan nilai koordinat latitude dan longitude dari variabel T2, Anda dapat memakai fungsi wrf.latlon_coords(). Pastikan dalam satu baris terdapat 2 variabel.\nlats, lons = wrf.latlon_coords(wrf_t2)\nUntuk mendapatkan waktu, Anda dapat memanggil Coordinates Time yang telah tersedia di dalam wrf_t2.\nwrf_time = wrf_t2.Time\nAnda juga dapat mengekstrak beberapa variabel yang tidak tersedia di dalam WRF, tentunya terbatas, seperti resultan kecepatan angin (wspd), arah angin (wdir), Convective Available Potential Energy (CAPE; cape3d_only/mcape), atau kelembapan relatif (rh2). Anda dapat membaca lebih lanjut di https://wrf-python.readthedocs.io/en/latest/diagnostics.html.\nVariabel curah hujan tidak ada di dalam WRF. Anda harus mengekstrak dan menjumlahkan variabel RAINC (Accumulated Total Cumulus Precipitation) dan RAINNC (Accumulated Total Grid Scale Cumulus Precipitation), maka diperoleh akumulasi curah hujan dari awal sampai akhir waktu simulasi. Anda perlu mengurangi curah hujan dari waktu ke \\(t\\) dengan \\(t-1\\) dengan memanfaatkan program perulangan (looping).\n# Ekstrak RAINC dan RAINNC\nrainc  = wrf.getvar(wrf_d03, \"RAINC\" , timeidx = wrf.ALL_TIMES)\nrainnc = wrf.getvar(wrf_d03, \"RAINNC\", timeidx = wrf.ALL_TIMES)\n\n# Menghitung Curah hujan akumulasi\nrain = rainc + rainnc\nrain_diff = rain.copy() # Metode .copy() agar var rain tidak ikut terubah\n\n# Lakukan perulangan\nlength = len(wrf_time.values)\nfor i in range(1, length):\n   rain_diff[i, :, :] = rain[i, :, :] - rain[i-1, :, :]\n\n# Copy Attribute (dari RAINC atau RAINNC)\nrain_diff.attrs = rainc.attrs\n# Tambahkan deskripsi\nrain_diff.attrs[\"description\"] = \"Total Rainfall\"\n# Menghapus variabel rain untuk mengoptimalkan memori\ndel rain\n\nSetelah berhasil mengekstrak variabel dari langkah sebelumnya, langkah-langkah berikut ini adalah pembuatan grafik spasial dari variabel T2. Untuk membuatnya, Anda membutuhkan tambahan package matplotlib dan cartopy.\n\nAnda telah mendefinisikan lokasi (variabel lats dan lons) pada langkah sebelumnya. Kedua variabel tersebut digunakan dalam membuat grafik spasial.\nVariabel suhu udara yang telah diekstrak pada langkah sebelumnya memiliki waktu dari awal hingga akhir simulasi. Anda hanya dapat memilih salah satu waktu dalam 1 grafik. Anda juga dapat membuat grafik untuk masing-masing waktu dalam satu grafik dalam bentuk panel plot. Untuk membuat grafik pada waktu tertentu, Anda perlu memilih waktu dan mengetahui letak indeksnya.\ntime     = \"2022-01-02 13:00:00\"\ntime     = np.array([time], dtype='datetime64[ns]')\ntime_idx = np.where(wrf_time.values == time)[0]\ntime_idx = int(time_idx)\nSebagai contoh skrip di bawah ini untuk membuat grafik spasial hanya satu waktu.\n# Mengambil informasi sistem proyeksi peta (dalam data ini adalah mercator)\ncart_proj = wrf.get_cartopy(wrf_t2, timeidx=time_idx)\n\n# Membuat dan mengatur ukuran grafik\nfig = plt.figure(figsize=(12, 10))\n# Mengatur sistem proyeksi sesuai metadata WRF\nax = plt.axes(projection=cart_proj)\n\n# Menambahkan garis pantai. Sumber data: www.naturalearthdata.com\nax.coastlines(linewidth=0.8)\n\n# Menambahkan garis lintang dan bujur\ngl = ax.gridlines(draw_labels=True, linewidth=1, color='gray', alpha=0.5, linestyle='--')\ngl.top_labels = False   # Menghilangkan label bujur di atas\ngl.right_labels = False # Menghilangkan label lintang di kanan\n\n# Mengatur nilai untuk skala legenda  \nlvl = np.arange(290, 304, 2)\n\n# Menambahkan garis kontur terisi\nplt.contourf(lons, lats, wrf_t2[time_idx, :, :],\n            levels=lvl,\n            transform=crs.PlateCarree(),\n            cmap='viridis')\n\n# Menambahkan legenda warna\nplt.colorbar(ax=ax, shrink=0.7)\n\n# Menampilkan grafik\nplt.show()\n\n\n\n\n\n\n\nGambar 15: Grafik suhu udara 2-meter di atas permukaan tanah pada 2022-01-02 13:00:00 UTC\n\n\n\nSelain spasial, Anda dapat pula menampilkan grafik seri waktu untuk titik koordinat atau rata-rata grid tertentu.\n\nTentukan titik koordinat yang akan dibuat grafik seri waktu\nlats_sel = -7.271372797667375\nlons_sel = 112.73417496409039\nUntuk menentukan indeks dari titik koordinat yang telah didefinisikan tersebut, gunakan fungsi wrf.ll_to_xy(). Nilai yang dikeluarkan adalah indeks dari lokasi terdekat.\nlatlon_idx = wrf.ll_to_xy(wrf_d03, lats_sel, lons_sel)\nwrf_t2_sel = wrf_t2[:, latlon_idx[1], latlon_idx[0]]\nLakukan plot seri waktu\n# Mengatur ukuran grafik\nfig = plt.figure(figsize=(12, 5))\nax  = plt.axes()\n\n# Plot -&gt; x: waktu, y: suhu udara (K)\nax.plot(wrf_time, wrf_t2_sel.values)\n\n# Mengatur label dan judul \nax.set_xlabel('Waktu')\nax.set_ylabel('Suhu udara 2m (K)')\nax.set_title(f'Suhu udara di {lats_sel}$^\\circ$, {lons_sel}$^\\circ$')\n\n# Tampilkan grafik\nplt.show()\n\n\n\nGrafik seri waktu suhu udara 2-meter di atas permukaan tanah\n\n\n\n\n\nPython (tanpa wrf-python)\nAnda juga dapat mengolah data luaran WRF tanpa memakai wrf-python. Anda bisa menggunakan modul xarray untuk membaca dan memanipulasi data. Perlu Anda ketahui bahwa data koordinat (latitude, longitude, dan waktu) dari luaran WRF akan terlihat berbeda karena belum menyesuaikan CF-Conventions. Oleh sebab itu, Anda bisa mengkonversi data WRF menjadi format CF-Conventions dengan NCL lalu dibaca dengan mengikuti langkah-langkah di bawah ini. Beberapa langkah di bawah ini, kami menjelaskan cara-cara teknik pembacaan data WRF tanpa mengikuti CF-Conventions.\n\nImpor paket\nimport xarray as xr\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cartopy.crs as crs\nBuka salah satu file wrfout_d0*, misalnya wrfout_d03_2022-01-01_00:00:00 dan cetak variabel tersebut, misalkan variabel T2 (Air Temperature at 2m: suhu udara 2 meter dari permukaan tanah). Untuk melihat semua variabel, ketik saja nama variabel Python yang telah didefinisikan.\n# Lokasi folder luaran WRF\nwrf_path = '/home/absen/WRF-Model/WRF/test/em_real'\n# Membuka file wrfout\nwrf_d03 = xr.open_dataset(f\"{wrf_path}/wrfout_d03_2022-01-01_00:00:00\")\n# Mencetak isi semua variabel\nwrf_d03\n# Mengambil variabel\nwrf_t2m = wrf_d03['T2']\nPada langkah sebelumnya, Anda bisa langsung melakukan pembuatan grafik spasial\ntime     = \"2022-01-02 13:00:00\"\ntime     = np.array([time], dtype='datetime64[ns]')\ntime_idx = np.where(wrf_tme == time)[0]\ntime_idx = int(time_idx)\nwrf_t2m[time_idx, :, :].plot.contourf()\nAkan tetapi, informasi koordinat spasial seperti latitude dan longitude tidak sesuai, yang ditampilkan hanyalah indeks lokasi (0, 1, 2, …). Anda perlu memodifikasi wrf_t2m dengan cara memodifikasi informasi koordinat dengan mengambil variabel lokasi dan waktu di dalam file wrfout_d0*. Untuk latitude dan longitude, Anda bisa mengambil variabel XLAT dan XLONG. Variabel waktu (XTIME) di dalam informasi coordinates tidak perlu dimodifikasi. Berikut ini adalah contoh kode untuk memodifikasi informasi koordinat.\n # Mengambil variabel XLAT dan XLONG\n wrf_lat = wrf_d03['XLAT'][0, :, 0].values\n wrf_lon = wrf_d03['XLONG'][0, 0, :].values\n # Mengambil variabel XTIME\n wrf_tme = wrf_d03['XTIME'].values\n # Membuat DataArray baru dengan informasi koordinat yang telah dimodifikasi\n wrf_t2m_new = xr.DataArray(wrf_t2m.values,\n                        coords = {'time': wrf_tme,\n                                  'lat': wrf_lat, \n                                  'lon': wrf_lon},\n                         dims = ['time', 'lat', 'lon'])\nTerakhir, Anda bisa melakukan pembuatan grafik spasial dengan memanggil variabel wrf_t2m_new yang telah dimodifikasi informasi koordinatnya. Tampilan grafik sama seperti Gambar 15.\n# Membuat dan mengatur ukuran grafik\nfig = plt.figure(figsize=(10, 7))\n# Mengatur sistem proyeksi peta\nax = plt.axes(projection=crs.PlateCarree())\n\n# Menambahkan garis pantai. Sumber data: www.naturalearthdata.com\nax.coastlines(linewidth=0.8)\n\n# Menambahkan garis lintang dan bujur\ngl = ax.gridlines(draw_labels=True, linewidth=1, color='gray', alpha=0.5, linestyle='--')\ngl.top_labels = False   # Menghilangkan label bujur di atas\ngl.right_labels = False # Menghilangkan label lintang di kanan\n\n# Mengatur nilai untuk skala legenda  \nlvl = np.arange(290, 304, 2)\n\n# Menambahkan garis kontur terisi\nplt.contourf(wrf_lon, wrf_lat, wrf_t2m_new[time_idx, :, :],\n            levels=lvl,\n            cmap='viridis')\n\n# Menambahkan legenda warna\nplt.colorbar(ax=ax, shrink=0.7)\n\n# Menampilkan grafik\nplt.show()\n\n\n\nR\nAnda dapat menggunakan RStudio untuk menuliskan skrip R. Untuk mengolah data WRF di R, Anda perlu memasang package ncdf4 dan raster terlebih dahulu. Untuk kebutuhan plot seri waktu, kami menggunakan package tidyverse.\n\nSebelum memulai pengetikan kode R, buatlah file skrip R dengan memilih menu File &gt; New File &gt; R Script.\nDi console R pada RStudio, gunakan perintah berikut untuk memasang ncdf4 dan raster.\ninstall.packages(c('ncdf4', 'raster'))\nAnda juga dapat menggunakan menu pada RStudio: Tools &gt; Install Packaages. Kemudian, ketik “ncdf4, raster” (tanpa tanda petik) pada bagian Packages (separate multiple with space or comma). Setelah itu, klik Install.\nKami telah menyediakan fungsi skrip R untuk membuka file luaran WRF. Pada teks editor di RStudio, masukkan perintah berikut untuk mengimpor package ncdf4 dan raster beserta skrip wrf-raster.R. Fungsi wrf-raster.R dapat diunduh di https://github.com/agungbaruna/modul-pemodelan-iklim/blob/main/scripts/wrf-raster.R. Letakkan fungsi ini di dalam folder Project RStudio Anda.\nlibrary(ncdf4)\nlibrary(raster)\nlibrary(tidyverse)\nsource('wrf-raster.R')\nAnda dapat menjalankan ketiga baris kode tersebut dengan memblok seluruh baris atau arahkan kursor pada akhir kode kemudian tekan tombol CTRL + ENTER.\nSaat Anda menjalankan source('wrf-raster.R'), muncul Functions dengan nama wrf.raster pada jendela Environment di RStudio (letak jendela di sebelah kanan atas).\nUntuk menggunakan fungsi wrf.raster(), Anda hanya membutuhkan argumen wrf.file (nama folder wrfout_*) dan var.name (nama variabel di dalam wrfout_*). Nilai kembalian setelah menjalankan fungsi ini berbentuk RasterBrick. Argumen nlev dapat dicantumkan dengan angka bilangan bulat (1, 2, 3, …) khusus untuk variabel yang memiliki variasi terhadap ketinggian dan kedalaman, seperti suhu udara atau suhu tanah. Variabel lain yang tidak tercantum seperti curah hujan, sudah tersedia di dalam fungsi ini (var.name = rain).\nSebagai contoh mengambil variabel curah hujan.\nrain &lt;- wrf.raster(wrf.file = '/home/absen/WRF-Model/WRF/test/em_real/wrfout_d01_2022-01-01_00:00:00', var.name = 'rain')\nrain\nclass      : RasterBrick\ndimensions : 32, 32, 1024, 67  (nrow, ncol, ncell, nlayers)\nresolution : 0.1581326, 0.1567945  (x, y)\nextent     : 110.2099, 115.2701, -9.821663, -4.804237  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs\nsource     : memory\nnames      :   layer.1,   layer.2,   layer.3,   layer.4,   layer.5,   layer.6,  ...\nmin values :         0,         0,         0,         0,         0,         0,  ...\nmax values :  0.000000,  2.944275,  2.439148,  6.013021, 14.848666, 47.531946,  ...\ntime       : 2022-01-01 00:00:00, 2022-01-03 18:00:00 (min, max)\nPada respons melalui console R, terdapat berbagai informasi seperti dimensions, resolution, crs, serta time. Anda dapat mudah memahami isi dari file wrfout_d01* tersebut.\nAnda bisa langsung membuat grafik spasial dengan perintah 1 baris ini dan ditampilkan pada Gambar 16. Cukup sederhana.\nplot(rain)\n\n\n\n\n\n\n\nGambar 16: Plot curah hujan per 1 jam dari wrfout_d01*\n\n\n\n\nUntuk membuat grafik seri waktu pada lokasi tertentu, Anda dapat menggunakan fungsi extract() dan plot()\n# Waktu\ntime_sel &lt;- getZ(rain)\n\n# Lokasi\nlats_sel &lt;- -7.271372797667375\nlons_sel &lt;- 112.73417496409039\n\n# Ekstrak nilai curah hujan berdasarkan lokasi\nrain_sel &lt;- extract(rain, data.frame(x = lons_sel, y = lats_sel))\n\n# Plot grafik seri waktu\nggplot() +\n   geom_line(aes(x = time_sel, y = rain_sel[1,])) +\n   scale_x_datetime(\"Waktu (UTC)\", date_labels = \"%Y-%m-%d %H:%M\") +\n   scale_y_continuous(\"Curah Hujan (mm/jam)\")\n\n\n\nGrafik seri waktu curah hujan per 1 jam\n\n\n\n\n\nNCL\nNCAR telah menyediakan contoh skrip pengolahan data WRF dengan NCL. Anda dapat mengakses lebih banyak di https://www.ncl.ucar.edu/Applications/wrf.shtml. File netcdf luaran WRF pada dasarnya berbeda dengan file netcdf pada umumnya karena tidak mengikuti pedoman Climate and Forecast Convention. Alhasil, mengolah data WRF menggunakan aplikasi lain seperti ArcMap atau Matlab cukup rumit. Jika Anda ingin cukup mudah mengolahnya dengan aplikasi lainnya, skrip NCL untuk mengubah WRF menjadi CF-Convention dibuat oleh Mark Seefeldt dan telah tersedia di https://sundowner.colorado.edu/wrfout_to_cf/wrfout_to_cf.ncl. Berikut ini adalah cara penggunakan skrip wrfout_to_cf.ncl.\n\nAktifkan terlebih dahulu environment ncl pada terminal. Tulisan (base) menjadi (ncl) setelah perintah berhasil dipanggil.\nconda activate ncl\nAnda hanya perlu memasukkan variabel dir_in (lokasi folder wrfout), dir_out (lokasi folder wrfout setelah dikonversi), file_in (nama file wrfout), dan file_out (nama file wrfout setelah dikonversi).\nMasukkan perintah berikut.\nncl 'dir_in=\"/home/absen/WRF-Model/WRF/test/em_real/\"' 'file_in=\"wrfout_d01_2022-01-01_00:00:00\"' 'file_out=\"wrfout_cf_d01_2022-01-01_00:00:00.nc\"' wrfout_to_cf.ncl\nAnda dapat mengolah data luaran WRF setelah dikonversi menjadi CF-Convention pada aplikasi apapun dengan mudah. Hanya saja, Anda perlu memperhatikan perubahan nama variabel dan sesuaikan dengan data WRF asli.\n\nSelain mengubah menjadi CF-Convention, Anda dapat langsung menerapkan skrip NCL untuk analisis maupun visualisasi. Sebagai contoh skrip berikut ini untuk menampilkan suhu udara dekat permukaan dari luaran wrfout_d01*. Perlu diperhatikan bahwa simbol ; adalah komentar di dalam NCL. Anda dapat mengganti format file dari luaran skrip ini (mis. png, pdf, atau x11).\n;---Read file\nfpath    = \"/home/absen/WRF-Model/WRF/test/em_real/\"\nfilename = \"wrfout_d01_2022-01-01_00:00:00\"\na        = addfile(fpath+filename, \"r\")\n\n;---Get CEN_LAT and CEN_LON from WRF metadata (in global attributes)\ncen_lat = a@CEN_LAT\ncen_lon = a@CEN_LON\n\n;---Select time index\nnt = 30\n\n;---Read temperature at first time step\ntc = wrf_user_getvar(a, \"tc\", nt)\n\n;---Open worksheet\nwks = gsn_open_wks(\"png\", \"wrf_nogsn\") ; Format file luaran grafik, contoh png\n\n;---Set up resource list\nres                      = True\nres@gsnDraw              = False\nres@gsnFrame             = False\nres@tfDoNDCOverlay       = True\n\n;---Plotting options for air temperature\nopts_r                      = res\n\nopts_r@cnFillOn             = True\nopts_r@cnLevelSelectionMode = \"ExplicitLevels\"\nopts_r@cnLevels             = (/ 20, 22, 24, 26, 28, 30, 32 /)\nopts_r@cnSmoothingOn        = True\nopts_r@cnSmoothingDistanceF = .005\n\n;---Option for plt_res\nplt_res = res\n\n;---Option for plt_res\nmap_res = res\nmap_res@mpDataBaseVersion           = \"HighRes\"            ; Jika memilih \"HighRes\", Anda harus mengunduh semua file di  \nmap_res@mpDataResolution            = \"FinestResolution\"   ; https://www.io-warnemuende.de/rangs-en.html\nmap_res@mpCenterLatF                = cen_lat              ; dan letakkan di folder $NCARG_ROOT/lib/ncarg/database/rangs\nmap_res@mpCenterLonF                = cen_lon\nmap_res@mpGeophysicalLineColor      = \"black\"\nmap_res@mpGeophysicalLineThicknessF = 2.0\nmap_res@mpGridSpacingF              = 1.0\nmap_res@mpGridLineColor             = \"black\"\n\n;---Plot\ncontour_tot = wrf_contour(a, wks, tc(0,:,:), opts_r)\nplot = wrf_map_overlays(a, wks, (/contour_tot/), plt_res, map_res)\n\n\n\nPlot suhu udara dekat permukaan pada 2022-01-02 06:00:00 UTC\n\n\n\n\nQGIS\nAplikasi QGIS dapat juga digunakan untuk mengolah data WRF. Untuk memudahkan pengolahan data WRF, Anda perlu mengubah data WRF menjadi CF-Convention dengan skrip NCL sebelumnya. Setelah itu, Anda dapat mengimpor data WRF yang telah terkonversi dalam format NetCDF Classic ke QGIS. Berikut ini adalah langkah-langkahnya.\n\nPada menu QGIS, pilih Layer &gt; Add Layer &gt; Add Raster Layer (CTRL + SHIFT + R).\nPada bagian Source, klik ikon ... dan pilih file wrfout_* yang telah dikonversi menjadi CF-Convention.\n\n\n\nImport data WRF ke QGIS\n\n\nPilih variabel yang ingin Anda tampilkan. Misalnya, Anda dapat memilih T_2m untuk menampilkan suhu udara pada ketinggian 2 meter. Klik Add Layers, kemudian klik Add.\nKlik kanan pada raster yang telah diimpor dan pilih Properties. Pada Band Rendering di bagian Render type, pilih Singleband Gray. Pada bagian Gray band, terdapat pilihan nomor Band yang berisikan waktu.\n\n\n\nLayer properties\n\n\nNilai maksimum dan minimum suhu udara dapat terlihat di bawah layer.\nSetelah berhasil mengimpor, data raster dari WRF belum terproyeksi ke koordinat. Default sistem proyeksi pada QGIS kami adalah EPSG:4326 - WGS 84. Untuk mengubah sistem proyeksi, klik menu Raster &gt; Projections &gt; Warp (Reproject). Bagian Input layer diisi dengan raster yang akan diubah sistem proyeksinya dan Target CRS diisi dengan EPSG:4326 - WGS 84. Kemudian, klik Run.\n\n\n\nReproyeksi raster\n\n\nLayer raster baru akan muncul dengan nama Reprojected. Klik kanan pada raster tersebut dan pilih Zoom to Layer(s)\nAgar lebih meyakinkan, Anda dapat mengimpor file vector dari batas wilayah Indonesia. Untuk data ini, bisa Anda unduh di gadm.org. Pada contoh ini, kami menggunakan file *.json. Untuk mengimpornya, klik menu Layer &gt; Add Layer &gt; Add Vector Layer (CTRL + SHIFT + V). Pada bagian Source, klik ikon ... dan pilih file gadm41_IDN_1.json. Klik Add Layers, kemudian klik Add.\n\n\n\nImport data vector\n\n\n\n\n\nJulia\nSelain R dan Python, bahasa pemrograman Julia juga dapat digunakan untuk mengolah data WRF. Hanya saja, package khusus untuk WRF masih belum tersedia. Julia dapat digunakan di sistem operasi apa saja. Untuk pengguna Windows 10/11, Anda bisa menggunakan WSL atau terminal Windows langsung. Untuk membaca data netcdf dari WRF, algoritma yang kami berikan cukup memerlukan logika sehingga tidak semudah mengolahnya seperti di R. Anda dapat menggunakan package NCDatasets.jl, sedangkan untuk membuat grafik menggunakan Plots.jl. Berikut ini adalah langkah-langkahnya.\n\nBuka terminal interaktif Julia dengan mengetik julia.exe pada Command Prompt/PowerShell atau carilah program Julia pada Start Menu.\nBuka Jupyter Notebook pada terminal interaktif Julia dengan perintah berikut ini.\nusing IJulia\nnotebook()\nAktifkan package NCDatasets.jl dan Plots.jl.\nusing NCDatasets\nusing Plots\nAnda dapat menggunakan fungsi ncread() untuk membaca data WRF sekaligus menentukan variabel yang ingin diimpor. Berikut ini adalah contoh untuk mengimpor data suhu udara pada ketinggian 2 meter.\nwrf_path = \"C:\\\\Users\\\\taats\\\\Desktop\\\\\";\nwrf_file = joinpath(wrf_path, \"wrfout_d01_2022-01-01_00\");\nds = NCDataset(wrf_file, \"r\");\nt2 = ds[\"T2\"]\nT2 (32 × 32 × 67)\n  Datatype:    Float32\n  Dimensions:  west_east × south_north × Time\n  Attributes:\n  FieldType            = 104\n  MemoryOrder          = XY \n  description          = TEMP at 2 M\n  units                = K\n  stagger              = \n  coordinates          = XLONG XLAT XTIME\n\n\n\n\n\n\n\nCatatan\n\n\n\nPerhatikan tanda ; pada akhir baris kode. Tanda ini digunakan untuk menghilangkan respons dari kode tersebut. Cara ini sama seperti sintaks pada Matlab.\n\n\nDimensi pada variabel t2 bervariasi terhadap longitude (west_east), latitude (south_north), dan waktu (Time) secara berturut-turut. Cara membaca dimensi ini sama seperti pada package ncdf4 di R. Hanya saja, ini sudah didefinisikan di dalam skrip wrf-raster.R.\n\nSebelum menampilkan data, Anda perlu mengambil lokasi (latitude dan longitude).\nlat = ds[\"XLAT\"][1, :, 1];\nlon = ds[\"XLONG\"][:, 1, 1];\nAnda dapat menampilkan grafik spasial untuk 1 waktu dengan package Plots.jl dengan fungsi heatmap().\nnt = 1 # Indeks waktu = \"2022-01-01 00:00:00\"\nheatmap(lon, lat, transpose(t2[:, :, nt]))\nylabel!(\"latitude\")  # Menambahkan label sumbu y \nxlabel!(\"longitude\") # Menambahkan label sumbu x\nNilai pada setiap baris dari t2 bervariasi terhadap longitude, sedangkan pada kolom bervariasi terhadap latitude. Untuk menampilkan grafik dengan koordinat yang benar, Anda perlu membalikkan (baris ke kolom, dan sebaliknya) pada matriks t2 dengan fungsi transpose().\n\n\n\nGrafik grid/raster suhu udara 2m\n\n\nSelain divisualisasikan dalam bentuk grid/raster, Anda juga dapat menampilkan dalam bentuk kontur terisi dengan fungsi contourf() dari package Plots.jl.\nnt = 10 # Indeks waktu = \"2022-01-01 09:00:00\"\ncontourf(lon, lat, transpose(t2[:, :, nt]))\nylabel!(\"latitude\")  # Menambahkan label sumbu y \nxlabel!(\"longitude\") # Menambahkan label sumbu x\n\n\n\nGrafik kontur terisi suhu udara 2m\n\n\nUntuk grafik seri waktu, Anda dapat menggunakan fungsi plot() dari package Plots.jl. Berikut ini adalah contoh untuk menampilkan grafik seri waktu suhu udara pada ketinggian 2 meter.\n# | \nusing Dates\n\n# Mengambil variabel waktu\ntime = ds[\"XTIME\"];\nticks = Dates.format.(time, \"yyyy-mm-dd HH:MM\");\n\n# Pemilihan lokasi\nlats_sel =  -7.27;\nlons_sel = 112.73;\n\nlat_idx = findall(y -&gt; (y &gt; lats_sel - 0.1) && (y &lt; lats_sel + 0.1), lat);\nlon_idx = findall(x -&gt; (x &gt; lons_sel - 0.1) && (x &lt; lons_sel + 0.1), lon);\n\nlons = lon[lon_idx];\nlats = lat[lat_idx];\n\n# Membuat grafik seri waktu\nplot(ticks, t2[lon_idx[1], lat_idx[1], 1:length(time)], \n     labels=\"$(lons[1]); $(lats[1])\", xrotation=45)\nplot!(ticks, t2[lon_idx[2], lat_idx[1], 1:length(time)],\n     labels=\"$(lons[2]); $(lats[1])\")\nylabel!(\"Suhu udara 2m (°C)\") # Menambahkan label sumbu y \nxlabel!(\"Waktu (per 1 jam)\")  # Menambahkan label sumbu x\n\n\n\nGrafik seri waktu suhu udara 2m dari dua grid",
    "crumbs": [
      "WRF Model",
      "Overview"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pemodelan Iklim",
    "section": "",
    "text": "Pemodelan iklim adalah proses matematis yang digunakan untuk memprediksi perubahan iklim di masa depan. Pemodelan iklim melibatkan penggunaan data iklim historis dan teori fisika untuk memprediksi bagaimana iklim akan berubah di masa depan. Pemodelan iklim sangat penting karena dapat membantu kita memahami bagaimana perubahan iklim akan mempengaruhi kehidupan di Bumi."
  }
]